
Diode Temp Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000de4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013e1  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b6e  00000000  00000000  0000243d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000909  00000000  00000000  00002fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  000038b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000636  00000000  00000000  00003ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008a3  00000000  00000000  000040fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000499d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 23 02 	call	0x446	; 0x446 <main>
  8e:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADCRead>:
	uint32_t sum = 0; //The sum of all samples.
	uint16_t average = 0; // the average of all the samples
	uint16_t i; //This variable is going to be used as a counter in the 'for' loop
	
	//ADC Settings
	ADCSRB &= 0x00; //Free Running mode (Triggering Disabled in ADCSRA)
  96:	eb e7       	ldi	r30, 0x7B	; 123
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);// ADC Enable; Interupt Disable; Freq/64
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	96 68       	ori	r25, 0x86	; 134
  a6:	90 83       	st	Z, r25
	ADMUX |= ((1 << REFS0) | (1 << REFS1)) ; //Set Internal 1.1v reference		  	
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	90 6c       	ori	r25, 0xC0	; 192
  b0:	90 83       	st	Z, r25
	ADMUX &= 0b11110000;  //Reset ADC MUX Select
  b2:	90 81       	ld	r25, Z
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	90 83       	st	Z, r25
	ADMUX |= pin;  //Set input pin
  b8:	90 81       	ld	r25, Z
  ba:	89 2b       	or	r24, r25
  bc:	80 83       	st	Z, r24
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e2       	ldi	r19, 0x20	; 32

uint16_t ADCRead(uint8_t pin){
	
	//Initialization of required varibles.
	uint16_t input = 0; //We're going to sample and average from "number_sample" readings. 
	uint32_t sum = 0; //The sum of all samples.
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	ba 01       	movw	r22, r20
	
	// This loop is going to sample the ADC 'number_samples' times. Adding each value to 'sum'
	for(i = 0; i < number_samples; i++) {
		
		//Setup Conversation
		ADCSRA |= (1 << ADSC); //Start Conversation
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
		while( (ADCSRA & (1 << ADSC)) ); //Wait till conversation complete ( ADSC == 0 )
		ADCSRA |= (1 << ADIF);   // Clear ADC Interrupt Flag
		
		//Reading and logging the input for averaging
		input = ADC; //Read the ADC
  cc:	a8 e7       	ldi	r26, 0x78	; 120
  ce:	b0 e0       	ldi	r27, 0x00	; 0
	
	// This loop is going to sample the ADC 'number_samples' times. Adding each value to 'sum'
	for(i = 0; i < number_samples; i++) {
		
		//Setup Conversation
		ADCSRA |= (1 << ADSC); //Start Conversation
  d0:	90 81       	ld	r25, Z
  d2:	90 64       	ori	r25, 0x40	; 64
  d4:	90 83       	st	Z, r25
		while( (ADCSRA & (1 << ADSC)) ); //Wait till conversation complete ( ADSC == 0 )
  d6:	90 81       	ld	r25, Z
  d8:	96 fd       	sbrc	r25, 6
  da:	fd cf       	rjmp	.-6      	; 0xd6 <ADCRead+0x40>
		ADCSRA |= (1 << ADIF);   // Clear ADC Interrupt Flag
  dc:	90 81       	ld	r25, Z
  de:	90 61       	ori	r25, 0x10	; 16
  e0:	90 83       	st	Z, r25
		
		//Reading and logging the input for averaging
		input = ADC; //Read the ADC
  e2:	8d 91       	ld	r24, X+
  e4:	9c 91       	ld	r25, X
  e6:	11 97       	sbiw	r26, 0x01	; 1
		sum = sum + input;  // Add this value to the sum of the samples to be averaged later
  e8:	48 0f       	add	r20, r24
  ea:	59 1f       	adc	r21, r25
  ec:	61 1d       	adc	r22, r1
  ee:	71 1d       	adc	r23, r1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	31 09       	sbc	r19, r1
	ADMUX |= ((1 << REFS0) | (1 << REFS1)) ; //Set Internal 1.1v reference		  	
	ADMUX &= 0b11110000;  //Reset ADC MUX Select
	ADMUX |= pin;  //Set input pin
	
	// This loop is going to sample the ADC 'number_samples' times. Adding each value to 'sum'
	for(i = 0; i < number_samples; i++) {
  f4:	69 f7       	brne	.-38     	; 0xd0 <ADCRead+0x3a>
		sum = sum + input;  // Add this value to the sum of the samples to be averaged later
		
	}
	
	//Find the average of all the samples
	average = (uint16_t) (sum / number_samples);  
  f6:	db 01       	movw	r26, r22
  f8:	ca 01       	movw	r24, r20
  fa:	07 2e       	mov	r0, r23
  fc:	7d e0       	ldi	r23, 0x0D	; 13
  fe:	b6 95       	lsr	r27
 100:	a7 95       	ror	r26
 102:	97 95       	ror	r25
 104:	87 95       	ror	r24
 106:	7a 95       	dec	r23
 108:	d1 f7       	brne	.-12     	; 0xfe <ADCRead+0x68>
 10a:	70 2d       	mov	r23, r0
		
	return average;
}
 10c:	08 95       	ret

0000010e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 10e:	5e 9a       	sbi	0x0b, 6	; 11
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <toggle_e+0x4>
 116:	00 c0       	rjmp	.+0      	; 0x118 <toggle_e+0xa>
 118:	5e 98       	cbi	0x0b, 6	; 11
 11a:	08 95       	ret

0000011c <lcd_write>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	d8 2f       	mov	r29, r24
 122:	66 23       	and	r22, r22
 124:	11 f0       	breq	.+4      	; 0x12a <lcd_write+0xe>
 126:	5c 9a       	sbi	0x0b, 4	; 11
 128:	01 c0       	rjmp	.+2      	; 0x12c <lcd_write+0x10>
 12a:	5c 98       	cbi	0x0b, 4	; 11
 12c:	5d 98       	cbi	0x0b, 5	; 11
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	8a b9       	out	0x0a, r24	; 10
 134:	cb b1       	in	r28, 0x0b	; 11
 136:	c0 7f       	andi	r28, 0xF0	; 240
 138:	8d 2f       	mov	r24, r29
 13a:	82 95       	swap	r24
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	8c 2b       	or	r24, r28
 140:	8b b9       	out	0x0b, r24	; 11
 142:	0e 94 87 00 	call	0x10e	; 0x10e <toggle_e>
 146:	df 70       	andi	r29, 0x0F	; 15
 148:	dc 2b       	or	r29, r28
 14a:	db b9       	out	0x0b, r29	; 11
 14c:	0e 94 87 00 	call	0x10e	; 0x10e <toggle_e>
 150:	cf 60       	ori	r28, 0x0F	; 15
 152:	cb b9       	out	0x0b, r28	; 11
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_read>:
 15a:	88 23       	and	r24, r24
 15c:	11 f0       	breq	.+4      	; 0x162 <lcd_read+0x8>
 15e:	5c 9a       	sbi	0x0b, 4	; 11
 160:	01 c0       	rjmp	.+2      	; 0x164 <lcd_read+0xa>
 162:	5c 98       	cbi	0x0b, 4	; 11
 164:	5d 9a       	sbi	0x0b, 5	; 11
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	8a b9       	out	0x0a, r24	; 10
 16c:	5e 9a       	sbi	0x0b, 6	; 11
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_read+0x16>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_read+0x1c>
 176:	29 b1       	in	r18, 0x09	; 9
 178:	5e 98       	cbi	0x0b, 6	; 11
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_read+0x22>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_read+0x28>
 182:	5e 9a       	sbi	0x0b, 6	; 11
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_read+0x2c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_read+0x32>
 18c:	99 b1       	in	r25, 0x09	; 9
 18e:	22 95       	swap	r18
 190:	20 7f       	andi	r18, 0xF0	; 240
 192:	89 2f       	mov	r24, r25
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	5e 98       	cbi	0x0b, 6	; 11
 198:	82 2b       	or	r24, r18
 19a:	08 95       	ret

0000019c <lcd_waitbusy>:
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_read>
 1a2:	88 23       	and	r24, r24
 1a4:	dc f3       	brlt	.-10     	; 0x19c <lcd_waitbusy>
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_waitbusy+0xc>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_waitbusy+0x12>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_read>
 1b4:	08 95       	ret

000001b6 <lcd_command>:
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_waitbusy>
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_write>
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <lcd_gotoxy>:
 1ca:	61 11       	cpse	r22, r1
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <lcd_gotoxy+0xc>
 1ce:	80 58       	subi	r24, 0x80	; 128
 1d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1d4:	08 95       	ret
 1d6:	80 54       	subi	r24, 0x40	; 64
 1d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1dc:	08 95       	ret

000001de <lcd_clrscr>:
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1e4:	08 95       	ret

000001e6 <lcd_putc>:
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
 1ea:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_waitbusy>
 1ee:	ca 30       	cpi	r28, 0x0A	; 10
 1f0:	49 f4       	brne	.+18     	; 0x204 <lcd_putc+0x1e>
 1f2:	80 34       	cpi	r24, 0x40	; 64
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <lcd_putc+0x14>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <lcd_putc+0x16>
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	80 58       	subi	r24, 0x80	; 128
 1fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 202:	04 c0       	rjmp	.+8      	; 0x20c <lcd_putc+0x26>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_write>
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <lcd_puts>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	fc 01       	movw	r30, r24
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	29 f0       	breq	.+10     	; 0x22a <lcd_puts+0x1a>
 220:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_putc>
 224:	89 91       	ld	r24, Y+
 226:	81 11       	cpse	r24, r1
 228:	fb cf       	rjmp	.-10     	; 0x220 <lcd_puts+0x10>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 234:	9a b1       	in	r25, 0x0a	; 10
 236:	9f 67       	ori	r25, 0x7F	; 127
 238:	9a b9       	out	0x0a, r25	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	9c e7       	ldi	r25, 0x7C	; 124
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0xe>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_init+0x14>
 244:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 246:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 248:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 24a:	0e 94 87 00 	call	0x10e	; 0x10e <toggle_e>
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	97 e2       	ldi	r25, 0x27	; 39
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x22>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x28>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 25a:	0e 94 87 00 	call	0x10e	; 0x10e <toggle_e>
 25e:	9a ea       	ldi	r25, 0xAA	; 170
 260:	9a 95       	dec	r25
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x30>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x36>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 266:	0e 94 87 00 	call	0x10e	; 0x10e <toggle_e>
 26a:	8a ea       	ldi	r24, 0xAA	; 170
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init+0x3c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_init+0x42>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 272:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 274:	0e 94 87 00 	call	0x10e	; 0x10e <toggle_e>
 278:	9a ea       	ldi	r25, 0xAA	; 170
 27a:	9a 95       	dec	r25
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x4a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 28c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>

}/* lcd_init */
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <lcd_Write>:
  The Temperature output is limited for visual purposes
  
 ***********************************************************
 */

 void lcd_Write( uint16_t adc_reading_lm35, uint16_t adc_reading_diode, uint16_t temperture_lm35, uint16_t temperture_diode ){  //Not Tested
 2a0:	af 92       	push	r10
 2a2:	bf 92       	push	r11
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	a2 97       	sbiw	r28, 0x22	; 34
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	d8 2e       	mov	r13, r24
 2c6:	c9 2e       	mov	r12, r25
 2c8:	b6 2e       	mov	r11, r22
 2ca:	a7 2e       	mov	r10, r23
 2cc:	8a 01       	movw	r16, r20
 2ce:	79 01       	movw	r14, r18

	lcd_init( LCD_DISP_ON );   //Turn the LCD on, without cursor.
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 18 01 	call	0x230	; 0x230 <lcd_init>
	   outputs extremely large values for impractical (but possible) inputs.
	   This is mostly for keeping visual fidelity 
	   If the output temperature is larger than 'MAX_TEMP', we'll replace the extreme value
	   with a ':C'. ( A sad face )
	*/
	if ( (temperture_lm35 < MAX_TEMP) && (temperture_diode < MAX_TEMP) ){
 2d6:	03 36       	cpi	r16, 0x63	; 99
 2d8:	11 05       	cpc	r17, r1
 2da:	08 f0       	brcs	.+2      	; 0x2de <lcd_Write+0x3e>
 2dc:	9e c0       	rjmp	.+316    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 2de:	83 e6       	ldi	r24, 0x63	; 99
 2e0:	e8 16       	cp	r14, r24
 2e2:	f1 04       	cpc	r15, r1
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <lcd_Write+0x48>
 2e6:	47 c0       	rjmp	.+142    	; 0x376 <lcd_Write+0xd6>
	
		sprintf(display_line1, "LM35 :%4.0d - %dC", adc_reading_lm35, temperture_lm35);     //First line on the LCD
 2e8:	1f 93       	push	r17
 2ea:	0f 93       	push	r16
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	9f 93       	push	r25
 2f6:	8f 93       	push	r24
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
		sprintf(display_line2, "DIODE:%4.0d - %dC", adc_reading_diode, temperture_diode);   //Second line on the LCD
 304:	ff 92       	push	r15
 306:	ef 92       	push	r14
 308:	af 92       	push	r10
 30a:	bf 92       	push	r11
 30c:	82 e1       	ldi	r24, 0x12	; 18
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	ce 01       	movw	r24, r28
 316:	42 96       	adiw	r24, 0x12	; 18
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	66 c0       	rjmp	.+204    	; 0x3f8 <lcd_Write+0x158>
		
	} else if ( (temperture_lm35 > MAX_TEMP) && (temperture_diode < MAX_TEMP) ) {
 32c:	93 e6       	ldi	r25, 0x63	; 99
 32e:	e9 16       	cp	r14, r25
 330:	f1 04       	cpc	r15, r1
 332:	08 f0       	brcs	.+2      	; 0x336 <lcd_Write+0x96>
 334:	44 c0       	rjmp	.+136    	; 0x3be <lcd_Write+0x11e>
		
		sprintf(display_line1, "LM35 :%4.0d -  :(", adc_reading_lm35);						//First line on the LCD
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	84 e2       	ldi	r24, 0x24	; 36
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	9f 93       	push	r25
 348:	8f 93       	push	r24
 34a:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
		sprintf(display_line2, "DIODE:%4.0d - %dC", adc_reading_diode, temperture_diode);   //Second line on the LCD			
 34e:	ff 92       	push	r15
 350:	ef 92       	push	r14
 352:	af 92       	push	r10
 354:	bf 92       	push	r11
 356:	82 e1       	ldi	r24, 0x12	; 18
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	ce 01       	movw	r24, r28
 360:	42 96       	adiw	r24, 0x12	; 18
 362:	9f 93       	push	r25
 364:	8f 93       	push	r24
 366:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	41 c0       	rjmp	.+130    	; 0x3f8 <lcd_Write+0x158>
		
	} else if ( (temperture_lm35 < MAX_TEMP) && (temperture_diode > MAX_TEMP) ) {
 376:	94 e6       	ldi	r25, 0x64	; 100
 378:	e9 16       	cp	r14, r25
 37a:	f1 04       	cpc	r15, r1
 37c:	00 f1       	brcs	.+64     	; 0x3be <lcd_Write+0x11e>
		
		sprintf(display_line1, "LM35 :%4.0d - %dC", adc_reading_lm35, temperture_lm35);     //First line on the LCD
 37e:	1f 93       	push	r17
 380:	0f 93       	push	r16
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	9f 93       	push	r25
 38c:	8f 93       	push	r24
 38e:	ce 01       	movw	r24, r28
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
		sprintf(display_line2, "DIODE:%4.0d -  :C", adc_reading_diode);					    //Second line on the LCD
 39a:	af 92       	push	r10
 39c:	bf 92       	push	r11
 39e:	86 e3       	ldi	r24, 0x36	; 54
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	9f 93       	push	r25
 3a4:	8f 93       	push	r24
 3a6:	ce 01       	movw	r24, r28
 3a8:	42 96       	adiw	r24, 0x12	; 18
 3aa:	9f 93       	push	r25
 3ac:	8f 93       	push	r24
 3ae:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	1d c0       	rjmp	.+58     	; 0x3f8 <lcd_Write+0x158>
		
	} else {
		
		sprintf(display_line1, "LM35 :%4.0d -  :C", adc_reading_lm35);						//First line on the LCD
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	88 e4       	ldi	r24, 0x48	; 72
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	9f 93       	push	r25
 3d0:	8f 93       	push	r24
 3d2:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
		sprintf(display_line2, "DIODE:%4.0d -  :C", adc_reading_diode);					    //Second line on the LCD		
 3d6:	af 92       	push	r10
 3d8:	bf 92       	push	r11
 3da:	86 e3       	ldi	r24, 0x36	; 54
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	9f 93       	push	r25
 3e0:	8f 93       	push	r24
 3e2:	ce 01       	movw	r24, r28
 3e4:	42 96       	adiw	r24, 0x12	; 18
 3e6:	9f 93       	push	r25
 3e8:	8f 93       	push	r24
 3ea:	0e 94 18 04 	call	0x830	; 0x830 <sprintf>
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
		
	}
	
	//Begin printing information to display
	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x0);    //Move cursor to the first line
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_gotoxy>
	lcd_puts( display_line1 );                   //display line 1
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x1);    //Move cursor to the second line
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_gotoxy>
	lcd_puts( display_line2 );                   //display line 2
 410:	ce 01       	movw	r24, r28
 412:	42 96       	adiw	r24, 0x12	; 18
 414:	0e 94 08 01 	call	0x210	; 0x210 <lcd_puts>
 418:	05 c0       	rjmp	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	if ( (temperture_lm35 < MAX_TEMP) && (temperture_diode < MAX_TEMP) ){
	
		sprintf(display_line1, "LM35 :%4.0d - %dC", adc_reading_lm35, temperture_lm35);     //First line on the LCD
		sprintf(display_line2, "DIODE:%4.0d - %dC", adc_reading_diode, temperture_diode);   //Second line on the LCD
		
	} else if ( (temperture_lm35 > MAX_TEMP) && (temperture_diode < MAX_TEMP) ) {
 41a:	04 36       	cpi	r16, 0x64	; 100
 41c:	11 05       	cpc	r17, r1
 41e:	08 f0       	brcs	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	85 cf       	rjmp	.-246    	; 0x32c <lcd_Write+0x8c>
 422:	cd cf       	rjmp	.-102    	; 0x3be <lcd_Write+0x11e>
	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x0);    //Move cursor to the first line
	lcd_puts( display_line1 );                   //display line 1
	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x1);    //Move cursor to the second line
	lcd_puts( display_line2 );                   //display line 2
	
 }
 424:	a2 96       	adiw	r28, 0x22	; 34
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	bf 90       	pop	r11
 442:	af 90       	pop	r10
 444:	08 95       	ret

00000446 <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
     __asm__ __volatile__ (
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 452:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 456:	0f be       	out	0x3f, r0	; 63
	
	//Main Loop
	while(1){
		
		//Reads ADC. ADC function has filter built in
		adc_reading_lm35 = ADCRead(LM35_pin);  
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 4b 00 	call	0x96	; 0x96 <ADCRead>
 45e:	ec 01       	movw	r28, r24
		adc_reading_diode = ADCRead(Diode_pin);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 4b 00 	call	0x96	; 0x96 <ADCRead>
 466:	8c 01       	movw	r16, r24
		
		// Applies Map from 16bit ADC value to temperature
		temperture_lm35 = temperture_model_lm35(adc_reading_lm35);  
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <temperture_model_lm35>
 46e:	7c 01       	movw	r14, r24
		temperture_diode = temperture_model_diode(adc_reading_diode); 
 470:	c8 01       	movw	r24, r16
 472:	0e 94 42 02 	call	0x484	; 0x484 <temperture_model_diode>
		
		//Print results to LCD
		lcd_Write(adc_reading_lm35, adc_reading_diode, temperture_lm35, temperture_diode);
 476:	9c 01       	movw	r18, r24
 478:	a7 01       	movw	r20, r14
 47a:	b8 01       	movw	r22, r16
 47c:	ce 01       	movw	r24, r28
 47e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_Write>
	}
 482:	ea cf       	rjmp	.-44     	; 0x458 <main+0x12>

00000484 <temperture_model_diode>:
		Apply linear model. To avoid relying on decimals, we multiplied temperture 
		output by 100. Then built a linear model on that. So on return we divide by 100
		As a reminder a linear model is in the form y = mx + b.
	*/
	temperture = 31909; //This is the y-intercept (m = 0)
	temperture = temperture - ( 68.019 * adc_value ); //This is applying the slope of -68.019
 484:	bc 01       	movw	r22, r24
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 0e 03 	call	0x61c	; 0x61c <__floatunsisf>
 48e:	2a eb       	ldi	r18, 0xBA	; 186
 490:	39 e0       	ldi	r19, 0x09	; 9
 492:	48 e8       	ldi	r20, 0x88	; 136
 494:	52 e4       	ldi	r21, 0x42	; 66
 496:	0e 94 9c 03 	call	0x738	; 0x738 <__mulsf3>
 49a:	9b 01       	movw	r18, r22
 49c:	ac 01       	movw	r20, r24
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	7a e4       	ldi	r23, 0x4A	; 74
 4a2:	89 ef       	ldi	r24, 0xF9	; 249
 4a4:	96 e4       	ldi	r25, 0x46	; 70
 4a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__subsf3>
 4aa:	0e 94 df 02 	call	0x5be	; 0x5be <__fixunssfsi>
	
	// Divide output by 100 since the linear model was built from 
	// multiplying the temperture by 100
	return (temperture / 100);
 4ae:	9b 01       	movw	r18, r22
 4b0:	36 95       	lsr	r19
 4b2:	27 95       	ror	r18
 4b4:	36 95       	lsr	r19
 4b6:	27 95       	ror	r18
 4b8:	ab e7       	ldi	r26, 0x7B	; 123
 4ba:	b4 e1       	ldi	r27, 0x14	; 20
 4bc:	0e 94 09 04 	call	0x812	; 0x812 <__umulhisi3>
	
} 
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	08 95       	ret

000004c6 <temperture_model_lm35>:
		The LM35 raises its temperture by 0.01V per degree Celsius.
		It also has a 0V output at 0C.
		Since we're using a 1.1V reference, we can directly model this.
		This is what we're going to base the diode model on.
	*/
	temperture = adc_value * 0.1075; //We don't like decimals so we multiplied by 100 to keep precision. 
 4c6:	bc 01       	movw	r22, r24
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 0e 03 	call	0x61c	; 0x61c <__floatunsisf>
 4d0:	26 ef       	ldi	r18, 0xF6	; 246
 4d2:	38 e2       	ldi	r19, 0x28	; 40
 4d4:	4c ed       	ldi	r20, 0xDC	; 220
 4d6:	5d e3       	ldi	r21, 0x3D	; 61
 4d8:	0e 94 9c 03 	call	0x738	; 0x738 <__mulsf3>
 4dc:	0e 94 df 02 	call	0x5be	; 0x5be <__fixunssfsi>

	return temperture;


 4e0:	cb 01       	movw	r24, r22
 4e2:	08 95       	ret

000004e4 <__subsf3>:
 4e4:	50 58       	subi	r21, 0x80	; 128

000004e6 <__addsf3>:
 4e6:	bb 27       	eor	r27, r27
 4e8:	aa 27       	eor	r26, r26
 4ea:	0e 94 8a 02 	call	0x514	; 0x514 <__addsf3x>
 4ee:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__fp_round>
 4f2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_pscA>
 4f6:	38 f0       	brcs	.+14     	; 0x506 <__addsf3+0x20>
 4f8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscB>
 4fc:	20 f0       	brcs	.+8      	; 0x506 <__addsf3+0x20>
 4fe:	39 f4       	brne	.+14     	; 0x50e <__addsf3+0x28>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	19 f4       	brne	.+6      	; 0x50a <__addsf3+0x24>
 504:	26 f4       	brtc	.+8      	; 0x50e <__addsf3+0x28>
 506:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_nan>
 50a:	0e f4       	brtc	.+2      	; 0x50e <__addsf3+0x28>
 50c:	e0 95       	com	r30
 50e:	e7 fb       	bst	r30, 7
 510:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>

00000514 <__addsf3x>:
 514:	e9 2f       	mov	r30, r25
 516:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_split3>
 51a:	58 f3       	brcs	.-42     	; 0x4f2 <__addsf3+0xc>
 51c:	ba 17       	cp	r27, r26
 51e:	62 07       	cpc	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	95 07       	cpc	r25, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__addsf3x+0x1c>
 528:	79 f4       	brne	.+30     	; 0x548 <__addsf3x+0x34>
 52a:	a6 f5       	brtc	.+104    	; 0x594 <__addsf3x+0x80>
 52c:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_zero>
 530:	0e f4       	brtc	.+2      	; 0x534 <__addsf3x+0x20>
 532:	e0 95       	com	r30
 534:	0b 2e       	mov	r0, r27
 536:	ba 2f       	mov	r27, r26
 538:	a0 2d       	mov	r26, r0
 53a:	0b 01       	movw	r0, r22
 53c:	b9 01       	movw	r22, r18
 53e:	90 01       	movw	r18, r0
 540:	0c 01       	movw	r0, r24
 542:	ca 01       	movw	r24, r20
 544:	a0 01       	movw	r20, r0
 546:	11 24       	eor	r1, r1
 548:	ff 27       	eor	r31, r31
 54a:	59 1b       	sub	r21, r25
 54c:	99 f0       	breq	.+38     	; 0x574 <__addsf3x+0x60>
 54e:	59 3f       	cpi	r21, 0xF9	; 249
 550:	50 f4       	brcc	.+20     	; 0x566 <__addsf3x+0x52>
 552:	50 3e       	cpi	r21, 0xE0	; 224
 554:	68 f1       	brcs	.+90     	; 0x5b0 <__addsf3x+0x9c>
 556:	1a 16       	cp	r1, r26
 558:	f0 40       	sbci	r31, 0x00	; 0
 55a:	a2 2f       	mov	r26, r18
 55c:	23 2f       	mov	r18, r19
 55e:	34 2f       	mov	r19, r20
 560:	44 27       	eor	r20, r20
 562:	58 5f       	subi	r21, 0xF8	; 248
 564:	f3 cf       	rjmp	.-26     	; 0x54c <__addsf3x+0x38>
 566:	46 95       	lsr	r20
 568:	37 95       	ror	r19
 56a:	27 95       	ror	r18
 56c:	a7 95       	ror	r26
 56e:	f0 40       	sbci	r31, 0x00	; 0
 570:	53 95       	inc	r21
 572:	c9 f7       	brne	.-14     	; 0x566 <__addsf3x+0x52>
 574:	7e f4       	brtc	.+30     	; 0x594 <__addsf3x+0x80>
 576:	1f 16       	cp	r1, r31
 578:	ba 0b       	sbc	r27, r26
 57a:	62 0b       	sbc	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	ba f0       	brmi	.+46     	; 0x5b0 <__addsf3x+0x9c>
 582:	91 50       	subi	r25, 0x01	; 1
 584:	a1 f0       	breq	.+40     	; 0x5ae <__addsf3x+0x9a>
 586:	ff 0f       	add	r31, r31
 588:	bb 1f       	adc	r27, r27
 58a:	66 1f       	adc	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	88 1f       	adc	r24, r24
 590:	c2 f7       	brpl	.-16     	; 0x582 <__addsf3x+0x6e>
 592:	0e c0       	rjmp	.+28     	; 0x5b0 <__addsf3x+0x9c>
 594:	ba 0f       	add	r27, r26
 596:	62 1f       	adc	r22, r18
 598:	73 1f       	adc	r23, r19
 59a:	84 1f       	adc	r24, r20
 59c:	48 f4       	brcc	.+18     	; 0x5b0 <__addsf3x+0x9c>
 59e:	87 95       	ror	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b7 95       	ror	r27
 5a6:	f7 95       	ror	r31
 5a8:	9e 3f       	cpi	r25, 0xFE	; 254
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <__addsf3x+0x9a>
 5ac:	b0 cf       	rjmp	.-160    	; 0x50e <__addsf3+0x28>
 5ae:	93 95       	inc	r25
 5b0:	88 0f       	add	r24, r24
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <__addsf3x+0xa2>
 5b4:	99 27       	eor	r25, r25
 5b6:	ee 0f       	add	r30, r30
 5b8:	97 95       	ror	r25
 5ba:	87 95       	ror	r24
 5bc:	08 95       	ret

000005be <__fixunssfsi>:
 5be:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_splitA>
 5c2:	88 f0       	brcs	.+34     	; 0x5e6 <__fixunssfsi+0x28>
 5c4:	9f 57       	subi	r25, 0x7F	; 127
 5c6:	98 f0       	brcs	.+38     	; 0x5ee <__fixunssfsi+0x30>
 5c8:	b9 2f       	mov	r27, r25
 5ca:	99 27       	eor	r25, r25
 5cc:	b7 51       	subi	r27, 0x17	; 23
 5ce:	b0 f0       	brcs	.+44     	; 0x5fc <__fixunssfsi+0x3e>
 5d0:	e1 f0       	breq	.+56     	; 0x60a <__fixunssfsi+0x4c>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	1a f0       	brmi	.+6      	; 0x5e2 <__fixunssfsi+0x24>
 5dc:	ba 95       	dec	r27
 5de:	c9 f7       	brne	.-14     	; 0x5d2 <__fixunssfsi+0x14>
 5e0:	14 c0       	rjmp	.+40     	; 0x60a <__fixunssfsi+0x4c>
 5e2:	b1 30       	cpi	r27, 0x01	; 1
 5e4:	91 f0       	breq	.+36     	; 0x60a <__fixunssfsi+0x4c>
 5e6:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_zero>
 5ea:	b1 e0       	ldi	r27, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_zero>
 5f2:	67 2f       	mov	r22, r23
 5f4:	78 2f       	mov	r23, r24
 5f6:	88 27       	eor	r24, r24
 5f8:	b8 5f       	subi	r27, 0xF8	; 248
 5fa:	39 f0       	breq	.+14     	; 0x60a <__fixunssfsi+0x4c>
 5fc:	b9 3f       	cpi	r27, 0xF9	; 249
 5fe:	cc f3       	brlt	.-14     	; 0x5f2 <__fixunssfsi+0x34>
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b3 95       	inc	r27
 608:	d9 f7       	brne	.-10     	; 0x600 <__fixunssfsi+0x42>
 60a:	3e f4       	brtc	.+14     	; 0x61a <__fixunssfsi+0x5c>
 60c:	90 95       	com	r25
 60e:	80 95       	com	r24
 610:	70 95       	com	r23
 612:	61 95       	neg	r22
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	8f 4f       	sbci	r24, 0xFF	; 255
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__floatunsisf>:
 61c:	e8 94       	clt
 61e:	09 c0       	rjmp	.+18     	; 0x632 <__floatsisf+0x12>

00000620 <__floatsisf>:
 620:	97 fb       	bst	r25, 7
 622:	3e f4       	brtc	.+14     	; 0x632 <__floatsisf+0x12>
 624:	90 95       	com	r25
 626:	80 95       	com	r24
 628:	70 95       	com	r23
 62a:	61 95       	neg	r22
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	99 23       	and	r25, r25
 634:	a9 f0       	breq	.+42     	; 0x660 <__floatsisf+0x40>
 636:	f9 2f       	mov	r31, r25
 638:	96 e9       	ldi	r25, 0x96	; 150
 63a:	bb 27       	eor	r27, r27
 63c:	93 95       	inc	r25
 63e:	f6 95       	lsr	r31
 640:	87 95       	ror	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b7 95       	ror	r27
 648:	f1 11       	cpse	r31, r1
 64a:	f8 cf       	rjmp	.-16     	; 0x63c <__floatsisf+0x1c>
 64c:	fa f4       	brpl	.+62     	; 0x68c <__floatsisf+0x6c>
 64e:	bb 0f       	add	r27, r27
 650:	11 f4       	brne	.+4      	; 0x656 <__floatsisf+0x36>
 652:	60 ff       	sbrs	r22, 0
 654:	1b c0       	rjmp	.+54     	; 0x68c <__floatsisf+0x6c>
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	16 c0       	rjmp	.+44     	; 0x68c <__floatsisf+0x6c>
 660:	88 23       	and	r24, r24
 662:	11 f0       	breq	.+4      	; 0x668 <__floatsisf+0x48>
 664:	96 e9       	ldi	r25, 0x96	; 150
 666:	11 c0       	rjmp	.+34     	; 0x68a <__floatsisf+0x6a>
 668:	77 23       	and	r23, r23
 66a:	21 f0       	breq	.+8      	; 0x674 <__floatsisf+0x54>
 66c:	9e e8       	ldi	r25, 0x8E	; 142
 66e:	87 2f       	mov	r24, r23
 670:	76 2f       	mov	r23, r22
 672:	05 c0       	rjmp	.+10     	; 0x67e <__floatsisf+0x5e>
 674:	66 23       	and	r22, r22
 676:	71 f0       	breq	.+28     	; 0x694 <__floatsisf+0x74>
 678:	96 e8       	ldi	r25, 0x86	; 134
 67a:	86 2f       	mov	r24, r22
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	2a f0       	brmi	.+10     	; 0x68c <__floatsisf+0x6c>
 682:	9a 95       	dec	r25
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	da f7       	brpl	.-10     	; 0x682 <__floatsisf+0x62>
 68c:	88 0f       	add	r24, r24
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__fp_inf>:
 696:	97 f9       	bld	r25, 7
 698:	9f 67       	ori	r25, 0x7F	; 127
 69a:	80 e8       	ldi	r24, 0x80	; 128
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <__fp_nan>:
 6a2:	9f ef       	ldi	r25, 0xFF	; 255
 6a4:	80 ec       	ldi	r24, 0xC0	; 192
 6a6:	08 95       	ret

000006a8 <__fp_pscA>:
 6a8:	00 24       	eor	r0, r0
 6aa:	0a 94       	dec	r0
 6ac:	16 16       	cp	r1, r22
 6ae:	17 06       	cpc	r1, r23
 6b0:	18 06       	cpc	r1, r24
 6b2:	09 06       	cpc	r0, r25
 6b4:	08 95       	ret

000006b6 <__fp_pscB>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	12 16       	cp	r1, r18
 6bc:	13 06       	cpc	r1, r19
 6be:	14 06       	cpc	r1, r20
 6c0:	05 06       	cpc	r0, r21
 6c2:	08 95       	ret

000006c4 <__fp_round>:
 6c4:	09 2e       	mov	r0, r25
 6c6:	03 94       	inc	r0
 6c8:	00 0c       	add	r0, r0
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__fp_round+0xc>
 6cc:	88 23       	and	r24, r24
 6ce:	52 f0       	brmi	.+20     	; 0x6e4 <__fp_round+0x20>
 6d0:	bb 0f       	add	r27, r27
 6d2:	40 f4       	brcc	.+16     	; 0x6e4 <__fp_round+0x20>
 6d4:	bf 2b       	or	r27, r31
 6d6:	11 f4       	brne	.+4      	; 0x6dc <__fp_round+0x18>
 6d8:	60 ff       	sbrs	r22, 0
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <__fp_round+0x20>
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	08 95       	ret

000006e6 <__fp_split3>:
 6e6:	57 fd       	sbrc	r21, 7
 6e8:	90 58       	subi	r25, 0x80	; 128
 6ea:	44 0f       	add	r20, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	59 f0       	breq	.+22     	; 0x706 <__fp_splitA+0x10>
 6f0:	5f 3f       	cpi	r21, 0xFF	; 255
 6f2:	71 f0       	breq	.+28     	; 0x710 <__fp_splitA+0x1a>
 6f4:	47 95       	ror	r20

000006f6 <__fp_splitA>:
 6f6:	88 0f       	add	r24, r24
 6f8:	97 fb       	bst	r25, 7
 6fa:	99 1f       	adc	r25, r25
 6fc:	61 f0       	breq	.+24     	; 0x716 <__fp_splitA+0x20>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	79 f0       	breq	.+30     	; 0x720 <__fp_splitA+0x2a>
 702:	87 95       	ror	r24
 704:	08 95       	ret
 706:	12 16       	cp	r1, r18
 708:	13 06       	cpc	r1, r19
 70a:	14 06       	cpc	r1, r20
 70c:	55 1f       	adc	r21, r21
 70e:	f2 cf       	rjmp	.-28     	; 0x6f4 <__fp_split3+0xe>
 710:	46 95       	lsr	r20
 712:	f1 df       	rcall	.-30     	; 0x6f6 <__fp_splitA>
 714:	08 c0       	rjmp	.+16     	; 0x726 <__fp_splitA+0x30>
 716:	16 16       	cp	r1, r22
 718:	17 06       	cpc	r1, r23
 71a:	18 06       	cpc	r1, r24
 71c:	99 1f       	adc	r25, r25
 71e:	f1 cf       	rjmp	.-30     	; 0x702 <__fp_splitA+0xc>
 720:	86 95       	lsr	r24
 722:	71 05       	cpc	r23, r1
 724:	61 05       	cpc	r22, r1
 726:	08 94       	sec
 728:	08 95       	ret

0000072a <__fp_zero>:
 72a:	e8 94       	clt

0000072c <__fp_szero>:
 72c:	bb 27       	eor	r27, r27
 72e:	66 27       	eor	r22, r22
 730:	77 27       	eor	r23, r23
 732:	cb 01       	movw	r24, r22
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <__mulsf3>:
 738:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3x>
 73c:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__fp_round>
 740:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_pscA>
 744:	38 f0       	brcs	.+14     	; 0x754 <__mulsf3+0x1c>
 746:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscB>
 74a:	20 f0       	brcs	.+8      	; 0x754 <__mulsf3+0x1c>
 74c:	95 23       	and	r25, r21
 74e:	11 f0       	breq	.+4      	; 0x754 <__mulsf3+0x1c>
 750:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>
 754:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_nan>
 758:	11 24       	eor	r1, r1
 75a:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>

0000075e <__mulsf3x>:
 75e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fp_split3>
 762:	70 f3       	brcs	.-36     	; 0x740 <__mulsf3+0x8>

00000764 <__mulsf3_pse>:
 764:	95 9f       	mul	r25, r21
 766:	c1 f3       	breq	.-16     	; 0x758 <__mulsf3+0x20>
 768:	95 0f       	add	r25, r21
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	55 1f       	adc	r21, r21
 76e:	62 9f       	mul	r22, r18
 770:	f0 01       	movw	r30, r0
 772:	72 9f       	mul	r23, r18
 774:	bb 27       	eor	r27, r27
 776:	f0 0d       	add	r31, r0
 778:	b1 1d       	adc	r27, r1
 77a:	63 9f       	mul	r22, r19
 77c:	aa 27       	eor	r26, r26
 77e:	f0 0d       	add	r31, r0
 780:	b1 1d       	adc	r27, r1
 782:	aa 1f       	adc	r26, r26
 784:	64 9f       	mul	r22, r20
 786:	66 27       	eor	r22, r22
 788:	b0 0d       	add	r27, r0
 78a:	a1 1d       	adc	r26, r1
 78c:	66 1f       	adc	r22, r22
 78e:	82 9f       	mul	r24, r18
 790:	22 27       	eor	r18, r18
 792:	b0 0d       	add	r27, r0
 794:	a1 1d       	adc	r26, r1
 796:	62 1f       	adc	r22, r18
 798:	73 9f       	mul	r23, r19
 79a:	b0 0d       	add	r27, r0
 79c:	a1 1d       	adc	r26, r1
 79e:	62 1f       	adc	r22, r18
 7a0:	83 9f       	mul	r24, r19
 7a2:	a0 0d       	add	r26, r0
 7a4:	61 1d       	adc	r22, r1
 7a6:	22 1f       	adc	r18, r18
 7a8:	74 9f       	mul	r23, r20
 7aa:	33 27       	eor	r19, r19
 7ac:	a0 0d       	add	r26, r0
 7ae:	61 1d       	adc	r22, r1
 7b0:	23 1f       	adc	r18, r19
 7b2:	84 9f       	mul	r24, r20
 7b4:	60 0d       	add	r22, r0
 7b6:	21 1d       	adc	r18, r1
 7b8:	82 2f       	mov	r24, r18
 7ba:	76 2f       	mov	r23, r22
 7bc:	6a 2f       	mov	r22, r26
 7be:	11 24       	eor	r1, r1
 7c0:	9f 57       	subi	r25, 0x7F	; 127
 7c2:	50 40       	sbci	r21, 0x00	; 0
 7c4:	9a f0       	brmi	.+38     	; 0x7ec <__mulsf3_pse+0x88>
 7c6:	f1 f0       	breq	.+60     	; 0x804 <__mulsf3_pse+0xa0>
 7c8:	88 23       	and	r24, r24
 7ca:	4a f0       	brmi	.+18     	; 0x7de <__mulsf3_pse+0x7a>
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	bb 1f       	adc	r27, r27
 7d2:	66 1f       	adc	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	50 40       	sbci	r21, 0x00	; 0
 7dc:	a9 f7       	brne	.-22     	; 0x7c8 <__mulsf3_pse+0x64>
 7de:	9e 3f       	cpi	r25, 0xFE	; 254
 7e0:	51 05       	cpc	r21, r1
 7e2:	80 f0       	brcs	.+32     	; 0x804 <__mulsf3_pse+0xa0>
 7e4:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>
 7e8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_szero>
 7ec:	5f 3f       	cpi	r21, 0xFF	; 255
 7ee:	e4 f3       	brlt	.-8      	; 0x7e8 <__mulsf3_pse+0x84>
 7f0:	98 3e       	cpi	r25, 0xE8	; 232
 7f2:	d4 f3       	brlt	.-12     	; 0x7e8 <__mulsf3_pse+0x84>
 7f4:	86 95       	lsr	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b7 95       	ror	r27
 7fc:	f7 95       	ror	r31
 7fe:	e7 95       	ror	r30
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	c1 f7       	brne	.-16     	; 0x7f4 <__mulsf3_pse+0x90>
 804:	fe 2b       	or	r31, r30
 806:	88 0f       	add	r24, r24
 808:	91 1d       	adc	r25, r1
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__umulhisi3>:
 812:	a2 9f       	mul	r26, r18
 814:	b0 01       	movw	r22, r0
 816:	b3 9f       	mul	r27, r19
 818:	c0 01       	movw	r24, r0
 81a:	a3 9f       	mul	r26, r19
 81c:	70 0d       	add	r23, r0
 81e:	81 1d       	adc	r24, r1
 820:	11 24       	eor	r1, r1
 822:	91 1d       	adc	r25, r1
 824:	b2 9f       	mul	r27, r18
 826:	70 0d       	add	r23, r0
 828:	81 1d       	adc	r24, r1
 82a:	11 24       	eor	r1, r1
 82c:	91 1d       	adc	r25, r1
 82e:	08 95       	ret

00000830 <sprintf>:
 830:	ae e0       	ldi	r26, 0x0E	; 14
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	ee e1       	ldi	r30, 0x1E	; 30
 836:	f4 e0       	ldi	r31, 0x04	; 4
 838:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__prologue_saves__+0x1c>
 83c:	0d 89       	ldd	r16, Y+21	; 0x15
 83e:	1e 89       	ldd	r17, Y+22	; 0x16
 840:	86 e0       	ldi	r24, 0x06	; 6
 842:	8c 83       	std	Y+4, r24	; 0x04
 844:	1a 83       	std	Y+2, r17	; 0x02
 846:	09 83       	std	Y+1, r16	; 0x01
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	9f e7       	ldi	r25, 0x7F	; 127
 84c:	9e 83       	std	Y+6, r25	; 0x06
 84e:	8d 83       	std	Y+5, r24	; 0x05
 850:	ae 01       	movw	r20, r28
 852:	47 5e       	subi	r20, 0xE7	; 231
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	6f 89       	ldd	r22, Y+23	; 0x17
 858:	78 8d       	ldd	r23, Y+24	; 0x18
 85a:	ce 01       	movw	r24, r28
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	0e 94 3b 04 	call	0x876	; 0x876 <vfprintf>
 862:	2f 81       	ldd	r18, Y+7	; 0x07
 864:	38 85       	ldd	r19, Y+8	; 0x08
 866:	f8 01       	movw	r30, r16
 868:	e2 0f       	add	r30, r18
 86a:	f3 1f       	adc	r31, r19
 86c:	10 82       	st	Z, r1
 86e:	2e 96       	adiw	r28, 0x0e	; 14
 870:	e4 e0       	ldi	r30, 0x04	; 4
 872:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__epilogue_restores__+0x1c>

00000876 <vfprintf>:
 876:	ac e0       	ldi	r26, 0x0C	; 12
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	e1 e4       	ldi	r30, 0x41	; 65
 87c:	f4 e0       	ldi	r31, 0x04	; 4
 87e:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__prologue_saves__>
 882:	7c 01       	movw	r14, r24
 884:	6b 01       	movw	r12, r22
 886:	8a 01       	movw	r16, r20
 888:	fc 01       	movw	r30, r24
 88a:	17 82       	std	Z+7, r1	; 0x07
 88c:	16 82       	std	Z+6, r1	; 0x06
 88e:	83 81       	ldd	r24, Z+3	; 0x03
 890:	81 ff       	sbrs	r24, 1
 892:	bd c1       	rjmp	.+890    	; 0xc0e <__stack+0x30f>
 894:	ce 01       	movw	r24, r28
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	4c 01       	movw	r8, r24
 89a:	f7 01       	movw	r30, r14
 89c:	93 81       	ldd	r25, Z+3	; 0x03
 89e:	f6 01       	movw	r30, r12
 8a0:	93 fd       	sbrc	r25, 3
 8a2:	85 91       	lpm	r24, Z+
 8a4:	93 ff       	sbrs	r25, 3
 8a6:	81 91       	ld	r24, Z+
 8a8:	6f 01       	movw	r12, r30
 8aa:	88 23       	and	r24, r24
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <vfprintf+0x3a>
 8ae:	ab c1       	rjmp	.+854    	; 0xc06 <__stack+0x307>
 8b0:	85 32       	cpi	r24, 0x25	; 37
 8b2:	39 f4       	brne	.+14     	; 0x8c2 <vfprintf+0x4c>
 8b4:	93 fd       	sbrc	r25, 3
 8b6:	85 91       	lpm	r24, Z+
 8b8:	93 ff       	sbrs	r25, 3
 8ba:	81 91       	ld	r24, Z+
 8bc:	6f 01       	movw	r12, r30
 8be:	85 32       	cpi	r24, 0x25	; 37
 8c0:	29 f4       	brne	.+10     	; 0x8cc <vfprintf+0x56>
 8c2:	b7 01       	movw	r22, r14
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 8ca:	e7 cf       	rjmp	.-50     	; 0x89a <vfprintf+0x24>
 8cc:	51 2c       	mov	r5, r1
 8ce:	31 2c       	mov	r3, r1
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	20 32       	cpi	r18, 0x20	; 32
 8d4:	a0 f4       	brcc	.+40     	; 0x8fe <vfprintf+0x88>
 8d6:	8b 32       	cpi	r24, 0x2B	; 43
 8d8:	69 f0       	breq	.+26     	; 0x8f4 <vfprintf+0x7e>
 8da:	30 f4       	brcc	.+12     	; 0x8e8 <vfprintf+0x72>
 8dc:	80 32       	cpi	r24, 0x20	; 32
 8de:	59 f0       	breq	.+22     	; 0x8f6 <vfprintf+0x80>
 8e0:	83 32       	cpi	r24, 0x23	; 35
 8e2:	69 f4       	brne	.+26     	; 0x8fe <vfprintf+0x88>
 8e4:	20 61       	ori	r18, 0x10	; 16
 8e6:	2c c0       	rjmp	.+88     	; 0x940 <__stack+0x41>
 8e8:	8d 32       	cpi	r24, 0x2D	; 45
 8ea:	39 f0       	breq	.+14     	; 0x8fa <vfprintf+0x84>
 8ec:	80 33       	cpi	r24, 0x30	; 48
 8ee:	39 f4       	brne	.+14     	; 0x8fe <vfprintf+0x88>
 8f0:	21 60       	ori	r18, 0x01	; 1
 8f2:	26 c0       	rjmp	.+76     	; 0x940 <__stack+0x41>
 8f4:	22 60       	ori	r18, 0x02	; 2
 8f6:	24 60       	ori	r18, 0x04	; 4
 8f8:	23 c0       	rjmp	.+70     	; 0x940 <__stack+0x41>
 8fa:	28 60       	ori	r18, 0x08	; 8
 8fc:	21 c0       	rjmp	.+66     	; 0x940 <__stack+0x41>
 8fe:	27 fd       	sbrc	r18, 7
 900:	27 c0       	rjmp	.+78     	; 0x950 <__stack+0x51>
 902:	30 ed       	ldi	r19, 0xD0	; 208
 904:	38 0f       	add	r19, r24
 906:	3a 30       	cpi	r19, 0x0A	; 10
 908:	78 f4       	brcc	.+30     	; 0x928 <__stack+0x29>
 90a:	26 ff       	sbrs	r18, 6
 90c:	06 c0       	rjmp	.+12     	; 0x91a <__stack+0x1b>
 90e:	fa e0       	ldi	r31, 0x0A	; 10
 910:	5f 9e       	mul	r5, r31
 912:	30 0d       	add	r19, r0
 914:	11 24       	eor	r1, r1
 916:	53 2e       	mov	r5, r19
 918:	13 c0       	rjmp	.+38     	; 0x940 <__stack+0x41>
 91a:	8a e0       	ldi	r24, 0x0A	; 10
 91c:	38 9e       	mul	r3, r24
 91e:	30 0d       	add	r19, r0
 920:	11 24       	eor	r1, r1
 922:	33 2e       	mov	r3, r19
 924:	20 62       	ori	r18, 0x20	; 32
 926:	0c c0       	rjmp	.+24     	; 0x940 <__stack+0x41>
 928:	8e 32       	cpi	r24, 0x2E	; 46
 92a:	21 f4       	brne	.+8      	; 0x934 <__stack+0x35>
 92c:	26 fd       	sbrc	r18, 6
 92e:	6b c1       	rjmp	.+726    	; 0xc06 <__stack+0x307>
 930:	20 64       	ori	r18, 0x40	; 64
 932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0x41>
 934:	8c 36       	cpi	r24, 0x6C	; 108
 936:	11 f4       	brne	.+4      	; 0x93c <__stack+0x3d>
 938:	20 68       	ori	r18, 0x80	; 128
 93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
 93c:	88 36       	cpi	r24, 0x68	; 104
 93e:	41 f4       	brne	.+16     	; 0x950 <__stack+0x51>
 940:	f6 01       	movw	r30, r12
 942:	93 fd       	sbrc	r25, 3
 944:	85 91       	lpm	r24, Z+
 946:	93 ff       	sbrs	r25, 3
 948:	81 91       	ld	r24, Z+
 94a:	6f 01       	movw	r12, r30
 94c:	81 11       	cpse	r24, r1
 94e:	c1 cf       	rjmp	.-126    	; 0x8d2 <vfprintf+0x5c>
 950:	98 2f       	mov	r25, r24
 952:	9f 7d       	andi	r25, 0xDF	; 223
 954:	95 54       	subi	r25, 0x45	; 69
 956:	93 30       	cpi	r25, 0x03	; 3
 958:	28 f4       	brcc	.+10     	; 0x964 <__stack+0x65>
 95a:	0c 5f       	subi	r16, 0xFC	; 252
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	ff e3       	ldi	r31, 0x3F	; 63
 960:	f9 83       	std	Y+1, r31	; 0x01
 962:	0d c0       	rjmp	.+26     	; 0x97e <__stack+0x7f>
 964:	83 36       	cpi	r24, 0x63	; 99
 966:	31 f0       	breq	.+12     	; 0x974 <__stack+0x75>
 968:	83 37       	cpi	r24, 0x73	; 115
 96a:	71 f0       	breq	.+28     	; 0x988 <__stack+0x89>
 96c:	83 35       	cpi	r24, 0x53	; 83
 96e:	09 f0       	breq	.+2      	; 0x972 <__stack+0x73>
 970:	5b c0       	rjmp	.+182    	; 0xa28 <__stack+0x129>
 972:	22 c0       	rjmp	.+68     	; 0x9b8 <__stack+0xb9>
 974:	f8 01       	movw	r30, r16
 976:	80 81       	ld	r24, Z
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	44 24       	eor	r4, r4
 980:	43 94       	inc	r4
 982:	51 2c       	mov	r5, r1
 984:	54 01       	movw	r10, r8
 986:	15 c0       	rjmp	.+42     	; 0x9b2 <__stack+0xb3>
 988:	38 01       	movw	r6, r16
 98a:	f2 e0       	ldi	r31, 0x02	; 2
 98c:	6f 0e       	add	r6, r31
 98e:	71 1c       	adc	r7, r1
 990:	f8 01       	movw	r30, r16
 992:	a0 80       	ld	r10, Z
 994:	b1 80       	ldd	r11, Z+1	; 0x01
 996:	26 ff       	sbrs	r18, 6
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <__stack+0xa1>
 99a:	65 2d       	mov	r22, r5
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0xa5>
 9a0:	6f ef       	ldi	r22, 0xFF	; 255
 9a2:	7f ef       	ldi	r23, 0xFF	; 255
 9a4:	c5 01       	movw	r24, r10
 9a6:	2c 87       	std	Y+12, r18	; 0x0c
 9a8:	0e 94 18 06 	call	0xc30	; 0xc30 <strnlen>
 9ac:	2c 01       	movw	r4, r24
 9ae:	83 01       	movw	r16, r6
 9b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 9b2:	2f 77       	andi	r18, 0x7F	; 127
 9b4:	22 2e       	mov	r2, r18
 9b6:	17 c0       	rjmp	.+46     	; 0x9e6 <__stack+0xe7>
 9b8:	38 01       	movw	r6, r16
 9ba:	f2 e0       	ldi	r31, 0x02	; 2
 9bc:	6f 0e       	add	r6, r31
 9be:	71 1c       	adc	r7, r1
 9c0:	f8 01       	movw	r30, r16
 9c2:	a0 80       	ld	r10, Z
 9c4:	b1 80       	ldd	r11, Z+1	; 0x01
 9c6:	26 ff       	sbrs	r18, 6
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
 9ca:	65 2d       	mov	r22, r5
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	6f ef       	ldi	r22, 0xFF	; 255
 9d2:	7f ef       	ldi	r23, 0xFF	; 255
 9d4:	c5 01       	movw	r24, r10
 9d6:	2c 87       	std	Y+12, r18	; 0x0c
 9d8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <strnlen_P>
 9dc:	2c 01       	movw	r4, r24
 9de:	2c 85       	ldd	r18, Y+12	; 0x0c
 9e0:	20 68       	ori	r18, 0x80	; 128
 9e2:	22 2e       	mov	r2, r18
 9e4:	83 01       	movw	r16, r6
 9e6:	23 fc       	sbrc	r2, 3
 9e8:	1b c0       	rjmp	.+54     	; 0xa20 <__stack+0x121>
 9ea:	83 2d       	mov	r24, r3
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	48 16       	cp	r4, r24
 9f0:	59 06       	cpc	r5, r25
 9f2:	b0 f4       	brcc	.+44     	; 0xa20 <__stack+0x121>
 9f4:	b7 01       	movw	r22, r14
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 9fe:	3a 94       	dec	r3
 a00:	f4 cf       	rjmp	.-24     	; 0x9ea <__stack+0xeb>
 a02:	f5 01       	movw	r30, r10
 a04:	27 fc       	sbrc	r2, 7
 a06:	85 91       	lpm	r24, Z+
 a08:	27 fe       	sbrs	r2, 7
 a0a:	81 91       	ld	r24, Z+
 a0c:	5f 01       	movw	r10, r30
 a0e:	b7 01       	movw	r22, r14
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 a16:	31 10       	cpse	r3, r1
 a18:	3a 94       	dec	r3
 a1a:	f1 e0       	ldi	r31, 0x01	; 1
 a1c:	4f 1a       	sub	r4, r31
 a1e:	51 08       	sbc	r5, r1
 a20:	41 14       	cp	r4, r1
 a22:	51 04       	cpc	r5, r1
 a24:	71 f7       	brne	.-36     	; 0xa02 <__stack+0x103>
 a26:	e5 c0       	rjmp	.+458    	; 0xbf2 <__stack+0x2f3>
 a28:	84 36       	cpi	r24, 0x64	; 100
 a2a:	11 f0       	breq	.+4      	; 0xa30 <__stack+0x131>
 a2c:	89 36       	cpi	r24, 0x69	; 105
 a2e:	39 f5       	brne	.+78     	; 0xa7e <__stack+0x17f>
 a30:	f8 01       	movw	r30, r16
 a32:	27 ff       	sbrs	r18, 7
 a34:	07 c0       	rjmp	.+14     	; 0xa44 <__stack+0x145>
 a36:	60 81       	ld	r22, Z
 a38:	71 81       	ldd	r23, Z+1	; 0x01
 a3a:	82 81       	ldd	r24, Z+2	; 0x02
 a3c:	93 81       	ldd	r25, Z+3	; 0x03
 a3e:	0c 5f       	subi	r16, 0xFC	; 252
 a40:	1f 4f       	sbci	r17, 0xFF	; 255
 a42:	08 c0       	rjmp	.+16     	; 0xa54 <__stack+0x155>
 a44:	60 81       	ld	r22, Z
 a46:	71 81       	ldd	r23, Z+1	; 0x01
 a48:	07 2e       	mov	r0, r23
 a4a:	00 0c       	add	r0, r0
 a4c:	88 0b       	sbc	r24, r24
 a4e:	99 0b       	sbc	r25, r25
 a50:	0e 5f       	subi	r16, 0xFE	; 254
 a52:	1f 4f       	sbci	r17, 0xFF	; 255
 a54:	2f 76       	andi	r18, 0x6F	; 111
 a56:	72 2e       	mov	r7, r18
 a58:	97 ff       	sbrs	r25, 7
 a5a:	09 c0       	rjmp	.+18     	; 0xa6e <__stack+0x16f>
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	20 68       	ori	r18, 0x80	; 128
 a6c:	72 2e       	mov	r7, r18
 a6e:	2a e0       	ldi	r18, 0x0A	; 10
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	a4 01       	movw	r20, r8
 a74:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__ultoa_invert>
 a78:	a8 2e       	mov	r10, r24
 a7a:	a8 18       	sub	r10, r8
 a7c:	44 c0       	rjmp	.+136    	; 0xb06 <__stack+0x207>
 a7e:	85 37       	cpi	r24, 0x75	; 117
 a80:	29 f4       	brne	.+10     	; 0xa8c <__stack+0x18d>
 a82:	2f 7e       	andi	r18, 0xEF	; 239
 a84:	b2 2e       	mov	r11, r18
 a86:	2a e0       	ldi	r18, 0x0A	; 10
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	25 c0       	rjmp	.+74     	; 0xad6 <__stack+0x1d7>
 a8c:	f2 2f       	mov	r31, r18
 a8e:	f9 7f       	andi	r31, 0xF9	; 249
 a90:	bf 2e       	mov	r11, r31
 a92:	8f 36       	cpi	r24, 0x6F	; 111
 a94:	c1 f0       	breq	.+48     	; 0xac6 <__stack+0x1c7>
 a96:	18 f4       	brcc	.+6      	; 0xa9e <__stack+0x19f>
 a98:	88 35       	cpi	r24, 0x58	; 88
 a9a:	79 f0       	breq	.+30     	; 0xaba <__stack+0x1bb>
 a9c:	b4 c0       	rjmp	.+360    	; 0xc06 <__stack+0x307>
 a9e:	80 37       	cpi	r24, 0x70	; 112
 aa0:	19 f0       	breq	.+6      	; 0xaa8 <__stack+0x1a9>
 aa2:	88 37       	cpi	r24, 0x78	; 120
 aa4:	21 f0       	breq	.+8      	; 0xaae <__stack+0x1af>
 aa6:	af c0       	rjmp	.+350    	; 0xc06 <__stack+0x307>
 aa8:	2f 2f       	mov	r18, r31
 aaa:	20 61       	ori	r18, 0x10	; 16
 aac:	b2 2e       	mov	r11, r18
 aae:	b4 fe       	sbrs	r11, 4
 ab0:	0d c0       	rjmp	.+26     	; 0xacc <__stack+0x1cd>
 ab2:	8b 2d       	mov	r24, r11
 ab4:	84 60       	ori	r24, 0x04	; 4
 ab6:	b8 2e       	mov	r11, r24
 ab8:	09 c0       	rjmp	.+18     	; 0xacc <__stack+0x1cd>
 aba:	24 ff       	sbrs	r18, 4
 abc:	0a c0       	rjmp	.+20     	; 0xad2 <__stack+0x1d3>
 abe:	9f 2f       	mov	r25, r31
 ac0:	96 60       	ori	r25, 0x06	; 6
 ac2:	b9 2e       	mov	r11, r25
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <__stack+0x1d3>
 ac6:	28 e0       	ldi	r18, 0x08	; 8
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	05 c0       	rjmp	.+10     	; 0xad6 <__stack+0x1d7>
 acc:	20 e1       	ldi	r18, 0x10	; 16
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__stack+0x1d7>
 ad2:	20 e1       	ldi	r18, 0x10	; 16
 ad4:	32 e0       	ldi	r19, 0x02	; 2
 ad6:	f8 01       	movw	r30, r16
 ad8:	b7 fe       	sbrs	r11, 7
 ada:	07 c0       	rjmp	.+14     	; 0xaea <__stack+0x1eb>
 adc:	60 81       	ld	r22, Z
 ade:	71 81       	ldd	r23, Z+1	; 0x01
 ae0:	82 81       	ldd	r24, Z+2	; 0x02
 ae2:	93 81       	ldd	r25, Z+3	; 0x03
 ae4:	0c 5f       	subi	r16, 0xFC	; 252
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <__stack+0x1f7>
 aea:	60 81       	ld	r22, Z
 aec:	71 81       	ldd	r23, Z+1	; 0x01
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 5f       	subi	r16, 0xFE	; 254
 af4:	1f 4f       	sbci	r17, 0xFF	; 255
 af6:	a4 01       	movw	r20, r8
 af8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__ultoa_invert>
 afc:	a8 2e       	mov	r10, r24
 afe:	a8 18       	sub	r10, r8
 b00:	fb 2d       	mov	r31, r11
 b02:	ff 77       	andi	r31, 0x7F	; 127
 b04:	7f 2e       	mov	r7, r31
 b06:	76 fe       	sbrs	r7, 6
 b08:	0b c0       	rjmp	.+22     	; 0xb20 <__stack+0x221>
 b0a:	37 2d       	mov	r19, r7
 b0c:	3e 7f       	andi	r19, 0xFE	; 254
 b0e:	a5 14       	cp	r10, r5
 b10:	50 f4       	brcc	.+20     	; 0xb26 <__stack+0x227>
 b12:	74 fe       	sbrs	r7, 4
 b14:	0a c0       	rjmp	.+20     	; 0xb2a <__stack+0x22b>
 b16:	72 fc       	sbrc	r7, 2
 b18:	08 c0       	rjmp	.+16     	; 0xb2a <__stack+0x22b>
 b1a:	37 2d       	mov	r19, r7
 b1c:	3e 7e       	andi	r19, 0xEE	; 238
 b1e:	05 c0       	rjmp	.+10     	; 0xb2a <__stack+0x22b>
 b20:	ba 2c       	mov	r11, r10
 b22:	37 2d       	mov	r19, r7
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x22d>
 b26:	ba 2c       	mov	r11, r10
 b28:	01 c0       	rjmp	.+2      	; 0xb2c <__stack+0x22d>
 b2a:	b5 2c       	mov	r11, r5
 b2c:	34 ff       	sbrs	r19, 4
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__stack+0x24b>
 b30:	fe 01       	movw	r30, r28
 b32:	ea 0d       	add	r30, r10
 b34:	f1 1d       	adc	r31, r1
 b36:	80 81       	ld	r24, Z
 b38:	80 33       	cpi	r24, 0x30	; 48
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__stack+0x241>
 b3c:	39 7e       	andi	r19, 0xE9	; 233
 b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__stack+0x253>
 b40:	32 ff       	sbrs	r19, 2
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <__stack+0x251>
 b44:	b3 94       	inc	r11
 b46:	b3 94       	inc	r11
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <__stack+0x253>
 b4a:	83 2f       	mov	r24, r19
 b4c:	86 78       	andi	r24, 0x86	; 134
 b4e:	09 f0       	breq	.+2      	; 0xb52 <__stack+0x253>
 b50:	b3 94       	inc	r11
 b52:	33 fd       	sbrc	r19, 3
 b54:	13 c0       	rjmp	.+38     	; 0xb7c <__stack+0x27d>
 b56:	30 ff       	sbrs	r19, 0
 b58:	06 c0       	rjmp	.+12     	; 0xb66 <__stack+0x267>
 b5a:	5a 2c       	mov	r5, r10
 b5c:	b3 14       	cp	r11, r3
 b5e:	18 f4       	brcc	.+6      	; 0xb66 <__stack+0x267>
 b60:	53 0c       	add	r5, r3
 b62:	5b 18       	sub	r5, r11
 b64:	b3 2c       	mov	r11, r3
 b66:	b3 14       	cp	r11, r3
 b68:	68 f4       	brcc	.+26     	; 0xb84 <__stack+0x285>
 b6a:	b7 01       	movw	r22, r14
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	3c 87       	std	Y+12, r19	; 0x0c
 b72:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 b76:	b3 94       	inc	r11
 b78:	3c 85       	ldd	r19, Y+12	; 0x0c
 b7a:	f5 cf       	rjmp	.-22     	; 0xb66 <__stack+0x267>
 b7c:	b3 14       	cp	r11, r3
 b7e:	10 f4       	brcc	.+4      	; 0xb84 <__stack+0x285>
 b80:	3b 18       	sub	r3, r11
 b82:	01 c0       	rjmp	.+2      	; 0xb86 <__stack+0x287>
 b84:	31 2c       	mov	r3, r1
 b86:	34 ff       	sbrs	r19, 4
 b88:	12 c0       	rjmp	.+36     	; 0xbae <__stack+0x2af>
 b8a:	b7 01       	movw	r22, r14
 b8c:	80 e3       	ldi	r24, 0x30	; 48
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	3c 87       	std	Y+12, r19	; 0x0c
 b92:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 b96:	3c 85       	ldd	r19, Y+12	; 0x0c
 b98:	32 ff       	sbrs	r19, 2
 b9a:	17 c0       	rjmp	.+46     	; 0xbca <__stack+0x2cb>
 b9c:	31 fd       	sbrc	r19, 1
 b9e:	03 c0       	rjmp	.+6      	; 0xba6 <__stack+0x2a7>
 ba0:	88 e7       	ldi	r24, 0x78	; 120
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <__stack+0x2ab>
 ba6:	88 e5       	ldi	r24, 0x58	; 88
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	b7 01       	movw	r22, r14
 bac:	0c c0       	rjmp	.+24     	; 0xbc6 <__stack+0x2c7>
 bae:	83 2f       	mov	r24, r19
 bb0:	86 78       	andi	r24, 0x86	; 134
 bb2:	59 f0       	breq	.+22     	; 0xbca <__stack+0x2cb>
 bb4:	31 ff       	sbrs	r19, 1
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <__stack+0x2bd>
 bb8:	8b e2       	ldi	r24, 0x2B	; 43
 bba:	01 c0       	rjmp	.+2      	; 0xbbe <__stack+0x2bf>
 bbc:	80 e2       	ldi	r24, 0x20	; 32
 bbe:	37 fd       	sbrc	r19, 7
 bc0:	8d e2       	ldi	r24, 0x2D	; 45
 bc2:	b7 01       	movw	r22, r14
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 bca:	a5 14       	cp	r10, r5
 bcc:	38 f4       	brcc	.+14     	; 0xbdc <__stack+0x2dd>
 bce:	b7 01       	movw	r22, r14
 bd0:	80 e3       	ldi	r24, 0x30	; 48
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 bd8:	5a 94       	dec	r5
 bda:	f7 cf       	rjmp	.-18     	; 0xbca <__stack+0x2cb>
 bdc:	aa 94       	dec	r10
 bde:	f4 01       	movw	r30, r8
 be0:	ea 0d       	add	r30, r10
 be2:	f1 1d       	adc	r31, r1
 be4:	80 81       	ld	r24, Z
 be6:	b7 01       	movw	r22, r14
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 bee:	a1 10       	cpse	r10, r1
 bf0:	f5 cf       	rjmp	.-22     	; 0xbdc <__stack+0x2dd>
 bf2:	33 20       	and	r3, r3
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <__stack+0x2f9>
 bf6:	51 ce       	rjmp	.-862    	; 0x89a <vfprintf+0x24>
 bf8:	b7 01       	movw	r22, r14
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 23 06 	call	0xc46	; 0xc46 <fputc>
 c02:	3a 94       	dec	r3
 c04:	f6 cf       	rjmp	.-20     	; 0xbf2 <__stack+0x2f3>
 c06:	f7 01       	movw	r30, r14
 c08:	86 81       	ldd	r24, Z+6	; 0x06
 c0a:	97 81       	ldd	r25, Z+7	; 0x07
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <__stack+0x313>
 c0e:	8f ef       	ldi	r24, 0xFF	; 255
 c10:	9f ef       	ldi	r25, 0xFF	; 255
 c12:	2c 96       	adiw	r28, 0x0c	; 12
 c14:	e2 e1       	ldi	r30, 0x12	; 18
 c16:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__epilogue_restores__>

00000c1a <strnlen_P>:
 c1a:	fc 01       	movw	r30, r24
 c1c:	05 90       	lpm	r0, Z+
 c1e:	61 50       	subi	r22, 0x01	; 1
 c20:	70 40       	sbci	r23, 0x00	; 0
 c22:	01 10       	cpse	r0, r1
 c24:	d8 f7       	brcc	.-10     	; 0xc1c <strnlen_P+0x2>
 c26:	80 95       	com	r24
 c28:	90 95       	com	r25
 c2a:	8e 0f       	add	r24, r30
 c2c:	9f 1f       	adc	r25, r31
 c2e:	08 95       	ret

00000c30 <strnlen>:
 c30:	fc 01       	movw	r30, r24
 c32:	61 50       	subi	r22, 0x01	; 1
 c34:	70 40       	sbci	r23, 0x00	; 0
 c36:	01 90       	ld	r0, Z+
 c38:	01 10       	cpse	r0, r1
 c3a:	d8 f7       	brcc	.-10     	; 0xc32 <strnlen+0x2>
 c3c:	80 95       	com	r24
 c3e:	90 95       	com	r25
 c40:	8e 0f       	add	r24, r30
 c42:	9f 1f       	adc	r25, r31
 c44:	08 95       	ret

00000c46 <fputc>:
 c46:	0f 93       	push	r16
 c48:	1f 93       	push	r17
 c4a:	cf 93       	push	r28
 c4c:	df 93       	push	r29
 c4e:	fb 01       	movw	r30, r22
 c50:	23 81       	ldd	r18, Z+3	; 0x03
 c52:	21 fd       	sbrc	r18, 1
 c54:	03 c0       	rjmp	.+6      	; 0xc5c <fputc+0x16>
 c56:	8f ef       	ldi	r24, 0xFF	; 255
 c58:	9f ef       	ldi	r25, 0xFF	; 255
 c5a:	28 c0       	rjmp	.+80     	; 0xcac <fputc+0x66>
 c5c:	22 ff       	sbrs	r18, 2
 c5e:	16 c0       	rjmp	.+44     	; 0xc8c <fputc+0x46>
 c60:	46 81       	ldd	r20, Z+6	; 0x06
 c62:	57 81       	ldd	r21, Z+7	; 0x07
 c64:	24 81       	ldd	r18, Z+4	; 0x04
 c66:	35 81       	ldd	r19, Z+5	; 0x05
 c68:	42 17       	cp	r20, r18
 c6a:	53 07       	cpc	r21, r19
 c6c:	44 f4       	brge	.+16     	; 0xc7e <fputc+0x38>
 c6e:	a0 81       	ld	r26, Z
 c70:	b1 81       	ldd	r27, Z+1	; 0x01
 c72:	9d 01       	movw	r18, r26
 c74:	2f 5f       	subi	r18, 0xFF	; 255
 c76:	3f 4f       	sbci	r19, 0xFF	; 255
 c78:	31 83       	std	Z+1, r19	; 0x01
 c7a:	20 83       	st	Z, r18
 c7c:	8c 93       	st	X, r24
 c7e:	26 81       	ldd	r18, Z+6	; 0x06
 c80:	37 81       	ldd	r19, Z+7	; 0x07
 c82:	2f 5f       	subi	r18, 0xFF	; 255
 c84:	3f 4f       	sbci	r19, 0xFF	; 255
 c86:	37 83       	std	Z+7, r19	; 0x07
 c88:	26 83       	std	Z+6, r18	; 0x06
 c8a:	10 c0       	rjmp	.+32     	; 0xcac <fputc+0x66>
 c8c:	eb 01       	movw	r28, r22
 c8e:	09 2f       	mov	r16, r25
 c90:	18 2f       	mov	r17, r24
 c92:	00 84       	ldd	r0, Z+8	; 0x08
 c94:	f1 85       	ldd	r31, Z+9	; 0x09
 c96:	e0 2d       	mov	r30, r0
 c98:	09 95       	icall
 c9a:	89 2b       	or	r24, r25
 c9c:	e1 f6       	brne	.-72     	; 0xc56 <fputc+0x10>
 c9e:	8e 81       	ldd	r24, Y+6	; 0x06
 ca0:	9f 81       	ldd	r25, Y+7	; 0x07
 ca2:	01 96       	adiw	r24, 0x01	; 1
 ca4:	9f 83       	std	Y+7, r25	; 0x07
 ca6:	8e 83       	std	Y+6, r24	; 0x06
 ca8:	81 2f       	mov	r24, r17
 caa:	90 2f       	mov	r25, r16
 cac:	df 91       	pop	r29
 cae:	cf 91       	pop	r28
 cb0:	1f 91       	pop	r17
 cb2:	0f 91       	pop	r16
 cb4:	08 95       	ret

00000cb6 <__ultoa_invert>:
 cb6:	fa 01       	movw	r30, r20
 cb8:	aa 27       	eor	r26, r26
 cba:	28 30       	cpi	r18, 0x08	; 8
 cbc:	51 f1       	breq	.+84     	; 0xd12 <__ultoa_invert+0x5c>
 cbe:	20 31       	cpi	r18, 0x10	; 16
 cc0:	81 f1       	breq	.+96     	; 0xd22 <__ultoa_invert+0x6c>
 cc2:	e8 94       	clt
 cc4:	6f 93       	push	r22
 cc6:	6e 7f       	andi	r22, 0xFE	; 254
 cc8:	6e 5f       	subi	r22, 0xFE	; 254
 cca:	7f 4f       	sbci	r23, 0xFF	; 255
 ccc:	8f 4f       	sbci	r24, 0xFF	; 255
 cce:	9f 4f       	sbci	r25, 0xFF	; 255
 cd0:	af 4f       	sbci	r26, 0xFF	; 255
 cd2:	b1 e0       	ldi	r27, 0x01	; 1
 cd4:	3e d0       	rcall	.+124    	; 0xd52 <__ultoa_invert+0x9c>
 cd6:	b4 e0       	ldi	r27, 0x04	; 4
 cd8:	3c d0       	rcall	.+120    	; 0xd52 <__ultoa_invert+0x9c>
 cda:	67 0f       	add	r22, r23
 cdc:	78 1f       	adc	r23, r24
 cde:	89 1f       	adc	r24, r25
 ce0:	9a 1f       	adc	r25, r26
 ce2:	a1 1d       	adc	r26, r1
 ce4:	68 0f       	add	r22, r24
 ce6:	79 1f       	adc	r23, r25
 ce8:	8a 1f       	adc	r24, r26
 cea:	91 1d       	adc	r25, r1
 cec:	a1 1d       	adc	r26, r1
 cee:	6a 0f       	add	r22, r26
 cf0:	71 1d       	adc	r23, r1
 cf2:	81 1d       	adc	r24, r1
 cf4:	91 1d       	adc	r25, r1
 cf6:	a1 1d       	adc	r26, r1
 cf8:	20 d0       	rcall	.+64     	; 0xd3a <__ultoa_invert+0x84>
 cfa:	09 f4       	brne	.+2      	; 0xcfe <__ultoa_invert+0x48>
 cfc:	68 94       	set
 cfe:	3f 91       	pop	r19
 d00:	2a e0       	ldi	r18, 0x0A	; 10
 d02:	26 9f       	mul	r18, r22
 d04:	11 24       	eor	r1, r1
 d06:	30 19       	sub	r19, r0
 d08:	30 5d       	subi	r19, 0xD0	; 208
 d0a:	31 93       	st	Z+, r19
 d0c:	de f6       	brtc	.-74     	; 0xcc4 <__ultoa_invert+0xe>
 d0e:	cf 01       	movw	r24, r30
 d10:	08 95       	ret
 d12:	46 2f       	mov	r20, r22
 d14:	47 70       	andi	r20, 0x07	; 7
 d16:	40 5d       	subi	r20, 0xD0	; 208
 d18:	41 93       	st	Z+, r20
 d1a:	b3 e0       	ldi	r27, 0x03	; 3
 d1c:	0f d0       	rcall	.+30     	; 0xd3c <__ultoa_invert+0x86>
 d1e:	c9 f7       	brne	.-14     	; 0xd12 <__ultoa_invert+0x5c>
 d20:	f6 cf       	rjmp	.-20     	; 0xd0e <__ultoa_invert+0x58>
 d22:	46 2f       	mov	r20, r22
 d24:	4f 70       	andi	r20, 0x0F	; 15
 d26:	40 5d       	subi	r20, 0xD0	; 208
 d28:	4a 33       	cpi	r20, 0x3A	; 58
 d2a:	18 f0       	brcs	.+6      	; 0xd32 <__ultoa_invert+0x7c>
 d2c:	49 5d       	subi	r20, 0xD9	; 217
 d2e:	31 fd       	sbrc	r19, 1
 d30:	40 52       	subi	r20, 0x20	; 32
 d32:	41 93       	st	Z+, r20
 d34:	02 d0       	rcall	.+4      	; 0xd3a <__ultoa_invert+0x84>
 d36:	a9 f7       	brne	.-22     	; 0xd22 <__ultoa_invert+0x6c>
 d38:	ea cf       	rjmp	.-44     	; 0xd0e <__ultoa_invert+0x58>
 d3a:	b4 e0       	ldi	r27, 0x04	; 4
 d3c:	a6 95       	lsr	r26
 d3e:	97 95       	ror	r25
 d40:	87 95       	ror	r24
 d42:	77 95       	ror	r23
 d44:	67 95       	ror	r22
 d46:	ba 95       	dec	r27
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__ultoa_invert+0x86>
 d4a:	00 97       	sbiw	r24, 0x00	; 0
 d4c:	61 05       	cpc	r22, r1
 d4e:	71 05       	cpc	r23, r1
 d50:	08 95       	ret
 d52:	9b 01       	movw	r18, r22
 d54:	ac 01       	movw	r20, r24
 d56:	0a 2e       	mov	r0, r26
 d58:	06 94       	lsr	r0
 d5a:	57 95       	ror	r21
 d5c:	47 95       	ror	r20
 d5e:	37 95       	ror	r19
 d60:	27 95       	ror	r18
 d62:	ba 95       	dec	r27
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__ultoa_invert+0xa2>
 d66:	62 0f       	add	r22, r18
 d68:	73 1f       	adc	r23, r19
 d6a:	84 1f       	adc	r24, r20
 d6c:	95 1f       	adc	r25, r21
 d6e:	a0 1d       	adc	r26, r0
 d70:	08 95       	ret

00000d72 <__prologue_saves__>:
 d72:	2f 92       	push	r2
 d74:	3f 92       	push	r3
 d76:	4f 92       	push	r4
 d78:	5f 92       	push	r5
 d7a:	6f 92       	push	r6
 d7c:	7f 92       	push	r7
 d7e:	8f 92       	push	r8
 d80:	9f 92       	push	r9
 d82:	af 92       	push	r10
 d84:	bf 92       	push	r11
 d86:	cf 92       	push	r12
 d88:	df 92       	push	r13
 d8a:	ef 92       	push	r14
 d8c:	ff 92       	push	r15
 d8e:	0f 93       	push	r16
 d90:	1f 93       	push	r17
 d92:	cf 93       	push	r28
 d94:	df 93       	push	r29
 d96:	cd b7       	in	r28, 0x3d	; 61
 d98:	de b7       	in	r29, 0x3e	; 62
 d9a:	ca 1b       	sub	r28, r26
 d9c:	db 0b       	sbc	r29, r27
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	f8 94       	cli
 da2:	de bf       	out	0x3e, r29	; 62
 da4:	0f be       	out	0x3f, r0	; 63
 da6:	cd bf       	out	0x3d, r28	; 61
 da8:	09 94       	ijmp

00000daa <__epilogue_restores__>:
 daa:	2a 88       	ldd	r2, Y+18	; 0x12
 dac:	39 88       	ldd	r3, Y+17	; 0x11
 dae:	48 88       	ldd	r4, Y+16	; 0x10
 db0:	5f 84       	ldd	r5, Y+15	; 0x0f
 db2:	6e 84       	ldd	r6, Y+14	; 0x0e
 db4:	7d 84       	ldd	r7, Y+13	; 0x0d
 db6:	8c 84       	ldd	r8, Y+12	; 0x0c
 db8:	9b 84       	ldd	r9, Y+11	; 0x0b
 dba:	aa 84       	ldd	r10, Y+10	; 0x0a
 dbc:	b9 84       	ldd	r11, Y+9	; 0x09
 dbe:	c8 84       	ldd	r12, Y+8	; 0x08
 dc0:	df 80       	ldd	r13, Y+7	; 0x07
 dc2:	ee 80       	ldd	r14, Y+6	; 0x06
 dc4:	fd 80       	ldd	r15, Y+5	; 0x05
 dc6:	0c 81       	ldd	r16, Y+4	; 0x04
 dc8:	1b 81       	ldd	r17, Y+3	; 0x03
 dca:	aa 81       	ldd	r26, Y+2	; 0x02
 dcc:	b9 81       	ldd	r27, Y+1	; 0x01
 dce:	ce 0f       	add	r28, r30
 dd0:	d1 1d       	adc	r29, r1
 dd2:	0f b6       	in	r0, 0x3f	; 63
 dd4:	f8 94       	cli
 dd6:	de bf       	out	0x3e, r29	; 62
 dd8:	0f be       	out	0x3f, r0	; 63
 dda:	cd bf       	out	0x3d, r28	; 61
 ddc:	ed 01       	movw	r28, r26
 dde:	08 95       	ret

00000de0 <_exit>:
 de0:	f8 94       	cli

00000de2 <__stop_program>:
 de2:	ff cf       	rjmp	.-2      	; 0xde2 <__stop_program>
