
Diode Temp Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000da8  00000e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014e5  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c12  00000000  00000000  000024d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000942  00000000  00000000  000030e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  00003a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000647  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000929  00000000  00000000  000042c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  8e:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADCRead>:

//Adds a basic low pass filter to the ADC input
#define number_samples 128
#define sample_time_us 100

uint16_t ADCRead(uint8_t pin){
  96:	8f 92       	push	r8
  98:	9f 92       	push	r9
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29

	uint16_t input; //We're going to sample and average from 16 readings. 
	double sum = 0; //The sum of all samples.
	double average = 0; // the average of all the sample
	
	ADCSRB &= 0x00; //Auto Trigger = Free Running mode
  aa:	eb e7       	ldi	r30, 0x7B	; 123
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);                // ADC Enable; Interupt Disable; Freq/1 
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	90 68       	ori	r25, 0x80	; 128
  ba:	90 83       	st	Z, r25
	ADMUX |= (1 << REFS0); //Set reference, AVcc
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	90 64       	ori	r25, 0x40	; 64
  c4:	90 83       	st	Z, r25
	//ADMUX |= ((1 << REFS0) | (1 << REFS1)) ; //Set Internal 1.1v reference		  
	
	ADMUX &= 0b11110000;
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	90 83       	st	Z, r25
	    
	ADMUX |= pin;  //Set input pin
  cc:	90 81       	ld	r25, Z
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
  d2:	68 94       	set
  d4:	ee 24       	eor	r14, r14
  d6:	e7 f8       	bld	r14, 7
  d8:	f1 2c       	mov	r15, r1
#define sample_time_us 100

uint16_t ADCRead(uint8_t pin){

	uint16_t input; //We're going to sample and average from 16 readings. 
	double sum = 0; //The sum of all samples.
  da:	81 2c       	mov	r8, r1
  dc:	91 2c       	mov	r9, r1
  de:	54 01       	movw	r10, r8
	ADMUX |= pin;  //Set input pin
	
	uint16_t i;
	for(i = 0; i < number_samples; i++) {
	
		ADCSRA |= (1 << ADSC); //Start Conversation
  e0:	ca e7       	ldi	r28, 0x7A	; 122
  e2:	d0 e0       	ldi	r29, 0x00	; 0

		while( (ADCSRA & (1 << ADSC)) ); //Wait till conversation complete ( ADSC == 0 )

		ADCSRA |= (1 << ADIF);   // Clear ADC Interrupt Flag
		
		input = ADC; 
  e4:	08 e7       	ldi	r16, 0x78	; 120
  e6:	10 e0       	ldi	r17, 0x00	; 0
	ADMUX |= pin;  //Set input pin
	
	uint16_t i;
	for(i = 0; i < number_samples; i++) {
	
		ADCSRA |= (1 << ADSC); //Start Conversation
  e8:	88 81       	ld	r24, Y
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	88 83       	st	Y, r24

		while( (ADCSRA & (1 << ADSC)) ); //Wait till conversation complete ( ADSC == 0 )
  ee:	88 81       	ld	r24, Y
  f0:	86 fd       	sbrc	r24, 6
  f2:	fd cf       	rjmp	.-6      	; 0xee <ADCRead+0x58>

		ADCSRA |= (1 << ADIF);   // Clear ADC Interrupt Flag
  f4:	88 81       	ld	r24, Y
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	88 83       	st	Y, r24
		
		input = ADC; 
  fa:	f8 01       	movw	r30, r16
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
		sum = sum + input;
 100:	bc 01       	movw	r22, r24
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 10a:	9b 01       	movw	r18, r22
 10c:	ac 01       	movw	r20, r24
 10e:	c5 01       	movw	r24, r10
 110:	b4 01       	movw	r22, r8
 112:	0e 94 42 02 	call	0x484	; 0x484 <__addsf3>
 116:	4b 01       	movw	r8, r22
 118:	5c 01       	movw	r10, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	87 ec       	ldi	r24, 0xC7	; 199
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <ADCRead+0x88>
 122:	00 c0       	rjmp	.+0      	; 0x124 <ADCRead+0x8e>
 124:	00 00       	nop
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	e9 1a       	sub	r14, r25
 12a:	f1 08       	sbc	r15, r1
	ADMUX &= 0b11110000;
	    
	ADMUX |= pin;  //Set input pin
	
	uint16_t i;
	for(i = 0; i < number_samples; i++) {
 12c:	e9 f6       	brne	.-70     	; 0xe8 <ADCRead+0x52>
		
		_delay_us(sample_time_us);
		
	}
	
	average = sum / number_samples;
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	5c e3       	ldi	r21, 0x3C	; 60
 136:	c5 01       	movw	r24, r10
 138:	b4 01       	movw	r22, r8
 13a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
		
	return (uint16_t) average;
 13e:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
}
 142:	cb 01       	movw	r24, r22
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	bf 90       	pop	r11
 152:	af 90       	pop	r10
 154:	9f 90       	pop	r9
 156:	8f 90       	pop	r8
 158:	08 95       	ret

0000015a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 15a:	5e 9a       	sbi	0x0b, 6	; 11
 15c:	00 00       	nop
 15e:	5e 98       	cbi	0x0b, 6	; 11
 160:	08 95       	ret

00000162 <lcd_write>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	d8 2f       	mov	r29, r24
 168:	66 23       	and	r22, r22
 16a:	11 f0       	breq	.+4      	; 0x170 <lcd_write+0xe>
 16c:	5c 9a       	sbi	0x0b, 4	; 11
 16e:	01 c0       	rjmp	.+2      	; 0x172 <lcd_write+0x10>
 170:	5c 98       	cbi	0x0b, 4	; 11
 172:	5d 98       	cbi	0x0b, 5	; 11
 174:	8a b1       	in	r24, 0x0a	; 10
 176:	8f 60       	ori	r24, 0x0F	; 15
 178:	8a b9       	out	0x0a, r24	; 10
 17a:	cb b1       	in	r28, 0x0b	; 11
 17c:	c0 7f       	andi	r28, 0xF0	; 240
 17e:	8d 2f       	mov	r24, r29
 180:	82 95       	swap	r24
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	8c 2b       	or	r24, r28
 186:	8b b9       	out	0x0b, r24	; 11
 188:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_e>
 18c:	df 70       	andi	r29, 0x0F	; 15
 18e:	dc 2b       	or	r29, r28
 190:	db b9       	out	0x0b, r29	; 11
 192:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_e>
 196:	cf 60       	ori	r28, 0x0F	; 15
 198:	cb b9       	out	0x0b, r28	; 11
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <lcd_read>:
 1a0:	88 23       	and	r24, r24
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <lcd_read+0x8>
 1a4:	5c 9a       	sbi	0x0b, 4	; 11
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <lcd_read+0xa>
 1a8:	5c 98       	cbi	0x0b, 4	; 11
 1aa:	5d 9a       	sbi	0x0b, 5	; 11
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	8a b9       	out	0x0a, r24	; 10
 1b2:	5e 9a       	sbi	0x0b, 6	; 11
 1b4:	00 00       	nop
 1b6:	29 b1       	in	r18, 0x09	; 9
 1b8:	5e 98       	cbi	0x0b, 6	; 11
 1ba:	00 00       	nop
 1bc:	5e 9a       	sbi	0x0b, 6	; 11
 1be:	00 00       	nop
 1c0:	99 b1       	in	r25, 0x09	; 9
 1c2:	22 95       	swap	r18
 1c4:	20 7f       	andi	r18, 0xF0	; 240
 1c6:	89 2f       	mov	r24, r25
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	5e 98       	cbi	0x0b, 6	; 11
 1cc:	82 2b       	or	r24, r18
 1ce:	08 95       	ret

000001d0 <lcd_waitbusy>:
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_read>
 1d6:	88 23       	and	r24, r24
 1d8:	dc f3       	brlt	.-10     	; 0x1d0 <lcd_waitbusy>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_waitbusy+0xc>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_waitbusy+0xe>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_read>
 1e4:	08 95       	ret

000001e6 <lcd_command>:
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
 1ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_waitbusy>
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_write>
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <lcd_gotoxy>:
 1fa:	61 11       	cpse	r22, r1
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <lcd_gotoxy+0xc>
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
 204:	08 95       	ret
 206:	80 54       	subi	r24, 0x40	; 64
 208:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
 20c:	08 95       	ret

0000020e <lcd_clrscr>:
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
 214:	08 95       	ret

00000216 <lcd_putc>:
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
 21a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_waitbusy>
 21e:	ca 30       	cpi	r28, 0x0A	; 10
 220:	49 f4       	brne	.+18     	; 0x234 <lcd_putc+0x1e>
 222:	80 34       	cpi	r24, 0x40	; 64
 224:	10 f0       	brcs	.+4      	; 0x22a <lcd_putc+0x14>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	01 c0       	rjmp	.+2      	; 0x22c <lcd_putc+0x16>
 22a:	80 e4       	ldi	r24, 0x40	; 64
 22c:	80 58       	subi	r24, 0x80	; 128
 22e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
 232:	04 c0       	rjmp	.+8      	; 0x23c <lcd_putc+0x26>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_write>
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <lcd_puts>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	88 23       	and	r24, r24
 24e:	29 f0       	breq	.+10     	; 0x25a <lcd_puts+0x1a>
 250:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_putc>
 254:	89 91       	ld	r24, Y+
 256:	81 11       	cpse	r24, r1
 258:	fb cf       	rjmp	.-10     	; 0x250 <lcd_puts+0x10>
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 260:	cf 93       	push	r28
 262:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 264:	9a b1       	in	r25, 0x0a	; 10
 266:	9f 67       	ori	r25, 0x7F	; 127
 268:	9a b9       	out	0x0a, r25	; 10
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0xe>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x14>
 274:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 276:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 278:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 27a:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_e>
 27e:	81 ee       	ldi	r24, 0xE1	; 225
 280:	94 e0       	ldi	r25, 0x04	; 4
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x22>
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_init+0x28>
 288:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 28a:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_e>
 28e:	95 e1       	ldi	r25, 0x15	; 21
 290:	9a 95       	dec	r25
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x30>
 294:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 296:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_e>
 29a:	85 e1       	ldi	r24, 0x15	; 21
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x3c>
 2a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2a2:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 2a4:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_e>
 2a8:	95 e1       	ldi	r25, 0x15	; 21
 2aa:	9a 95       	dec	r25
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0x4a>
 2ae:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2b0:	88 e2       	ldi	r24, 0x28	; 40
 2b2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2bc:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>

}/* lcd_init */
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <lcd_Write>:
  lcd_write takes in 4 values.  
  
 ***************************************
 */

 void lcd_Write( uint16_t adc_reading_lm35, uint16_t adc_reading_diode, struct double_as_2ints temperture_lm35, struct double_as_2ints temperture_diode ){  //Not Tested
 2d0:	7f 92       	push	r7
 2d2:	8f 92       	push	r8
 2d4:	9f 92       	push	r9
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	a2 97       	sbiw	r28, 0x22	; 34
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	d8 2e       	mov	r13, r24
 2fc:	c9 2e       	mov	r12, r25
 2fe:	a6 2e       	mov	r10, r22
 300:	97 2e       	mov	r9, r23
 302:	82 2e       	mov	r8, r18
 304:	73 2e       	mov	r7, r19
 306:	14 2f       	mov	r17, r20

	lcd_init( LCD_DISP_ON );   //Turn the LCD on, without cursor.
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0e 94 30 01 	call	0x260	; 0x260 <lcd_init>

	char display_line1[17];   //Allocate memory for each line. char = 1B and theres a max of 16 char.
	char display_line2[17];   // 1B for the NULL character produced by sprintf.
	
	sprintf(display_line1, "LM35 :%4.0d-%2d.%1.1dC", adc_reading_lm35, temperture_lm35.whole, (temperture_lm35.decimal) / 10 );     //First line on the LCD
 30e:	0f 2e       	mov	r0, r31
 310:	fd ec       	ldi	r31, 0xCD	; 205
 312:	bf 2e       	mov	r11, r31
 314:	f0 2d       	mov	r31, r0
 316:	1b 9d       	mul	r17, r11
 318:	11 2d       	mov	r17, r1
 31a:	11 24       	eor	r1, r1
 31c:	16 95       	lsr	r17
 31e:	16 95       	lsr	r17
 320:	16 95       	lsr	r17
 322:	1f 92       	push	r1
 324:	1f 93       	push	r17
 326:	7f 92       	push	r7
 328:	8f 92       	push	r8
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	6c 01       	movw	r12, r24
 33c:	9f 93       	push	r25
 33e:	8f 93       	push	r24
 340:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <sprintf>
	sprintf(display_line2, "DIODE:%4.0d-%2d.%1.1dC", adc_reading_diode, temperture_diode.whole, (temperture_diode.decimal) / 10);   //Second line on the LCD
 344:	0b 9d       	mul	r16, r11
 346:	01 2d       	mov	r16, r1
 348:	11 24       	eor	r1, r1
 34a:	06 95       	lsr	r16
 34c:	06 95       	lsr	r16
 34e:	06 95       	lsr	r16
 350:	1f 92       	push	r1
 352:	0f 93       	push	r16
 354:	ff 92       	push	r15
 356:	ef 92       	push	r14
 358:	9f 92       	push	r9
 35a:	af 92       	push	r10
 35c:	87 e1       	ldi	r24, 0x17	; 23
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	9f 93       	push	r25
 362:	8f 93       	push	r24
 364:	8e 01       	movw	r16, r28
 366:	0e 5e       	subi	r16, 0xEE	; 238
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	1f 93       	push	r17
 36c:	0f 93       	push	r16
 36e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <sprintf>

	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x0);    //Move cursor to the first line
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	lcd_puts( display_line1 );               //display line 1
 37a:	c6 01       	movw	r24, r12
 37c:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x1);    //Move cursor to the second line
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_gotoxy>
	lcd_puts( display_line2 );                //display line 2
 388:	c8 01       	movw	r24, r16
 38a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_puts>
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
	
 }
 398:	a2 96       	adiw	r28, 0x22	; 34
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	7f 90       	pop	r7
 3be:	08 95       	ret

000003c0 <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
     __asm__ __volatile__ (
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3cc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	c0 e8       	ldi	r28, 0x80	; 128
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3de:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3e2:	0f be       	out	0x3f, r0	; 63

	while(1){

		clock_prescale_set(clock_div_1); //Set freq to 8MHZ

		adc_reading_lm35 = ADCRead(LM35_pin);  //Reads ADC, the input is the pin number of the ADC
 3e4:	81 2f       	mov	r24, r17
 3e6:	0e 94 4b 00 	call	0x96	; 0x96 <ADCRead>
 3ea:	5c 01       	movw	r10, r24
		adc_reading_diode = ADCRead(Diode_pin);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 4b 00 	call	0x96	; 0x96 <ADCRead>
 3f2:	6c 01       	movw	r12, r24
		
		temperture_lm35 = temperture_model(adc_reading_lm35);
 3f4:	c5 01       	movw	r24, r10
 3f6:	0e 94 13 02 	call	0x426	; 0x426 <temperture_model>
 3fa:	3b 01       	movw	r6, r22
 3fc:	88 2e       	mov	r8, r24
		temperture_diode = temperture_model(adc_reading_diode);
 3fe:	c6 01       	movw	r24, r12
 400:	0e 94 13 02 	call	0x426	; 0x426 <temperture_model>
 404:	93 e0       	ldi	r25, 0x03	; 3
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 40e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 412:	0f be       	out	0x3f, r0	; 63
		
		clock_prescale_set(clock_div_8);  //For some reason the display doesnt like 8MHz, but works fine with 1MHZ
		lcd_Write(adc_reading_lm35, adc_reading_diode, temperture_lm35, temperture_diode);
 414:	7b 01       	movw	r14, r22
 416:	08 2f       	mov	r16, r24
 418:	48 2d       	mov	r20, r8
 41a:	93 01       	movw	r18, r6
 41c:	b6 01       	movw	r22, r12
 41e:	c5 01       	movw	r24, r10
 420:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_Write>
	}
 424:	d8 cf       	rjmp	.-80     	; 0x3d6 <main+0x16>

00000426 <temperture_model>:
#include "TempModel.h"


struct double_as_2ints temperture_model( uint16_t adc_value ){     //Assuming the ADC output is less than 1024
 426:	cf 92       	push	r12
 428:	df 92       	push	r13
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
	
	struct double_as_2ints temperture;
	uint32_t buffer = 0;
	uint32_t buf_adc;
	
	buf_adc = adc_value * (60.481);
 42e:	bc 01       	movw	r22, r24
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 438:	2b e8       	ldi	r18, 0x8B	; 139
 43a:	3c ee       	ldi	r19, 0xEC	; 236
 43c:	41 e7       	ldi	r20, 0x71	; 113
 43e:	52 e4       	ldi	r21, 0x42	; 66
 440:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
 444:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
	buffer = 28755;
	buffer = buffer - buf_adc;
 448:	0f 2e       	mov	r0, r31
 44a:	f3 e5       	ldi	r31, 0x53	; 83
 44c:	cf 2e       	mov	r12, r31
 44e:	f0 e7       	ldi	r31, 0x70	; 112
 450:	df 2e       	mov	r13, r31
 452:	e1 2c       	mov	r14, r1
 454:	f1 2c       	mov	r15, r1
 456:	f0 2d       	mov	r31, r0
 458:	c6 1a       	sub	r12, r22
 45a:	d7 0a       	sbc	r13, r23
 45c:	e8 0a       	sbc	r14, r24
 45e:	f9 0a       	sbc	r15, r25

	temperture.whole = (uint16_t) (buffer / 100);
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	24 e6       	ldi	r18, 0x64	; 100
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__udivmodsi4>
	temperture.decimal = (uint8_t) buffer - temperture.whole;
	
	return temperture;
 470:	62 2f       	mov	r22, r18
	
 472:	73 2f       	mov	r23, r19
 474:	8c 2d       	mov	r24, r12
 476:	82 1b       	sub	r24, r18
 478:	ff 90       	pop	r15
 47a:	ef 90       	pop	r14
 47c:	df 90       	pop	r13
 47e:	cf 90       	pop	r12
 480:	08 95       	ret

00000482 <__subsf3>:
 482:	50 58       	subi	r21, 0x80	; 128

00000484 <__addsf3>:
 484:	bb 27       	eor	r27, r27
 486:	aa 27       	eor	r26, r26
 488:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__addsf3x>
 48c:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_round>
 490:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscA>
 494:	38 f0       	brcs	.+14     	; 0x4a4 <__addsf3+0x20>
 496:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscB>
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__addsf3+0x20>
 49c:	39 f4       	brne	.+14     	; 0x4ac <__addsf3+0x28>
 49e:	9f 3f       	cpi	r25, 0xFF	; 255
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <__addsf3+0x24>
 4a2:	26 f4       	brtc	.+8      	; 0x4ac <__addsf3+0x28>
 4a4:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_nan>
 4a8:	0e f4       	brtc	.+2      	; 0x4ac <__addsf3+0x28>
 4aa:	e0 95       	com	r30
 4ac:	e7 fb       	bst	r30, 7
 4ae:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>

000004b2 <__addsf3x>:
 4b2:	e9 2f       	mov	r30, r25
 4b4:	0e 94 42 03 	call	0x684	; 0x684 <__fp_split3>
 4b8:	58 f3       	brcs	.-42     	; 0x490 <__addsf3+0xc>
 4ba:	ba 17       	cp	r27, r26
 4bc:	62 07       	cpc	r22, r18
 4be:	73 07       	cpc	r23, r19
 4c0:	84 07       	cpc	r24, r20
 4c2:	95 07       	cpc	r25, r21
 4c4:	20 f0       	brcs	.+8      	; 0x4ce <__addsf3x+0x1c>
 4c6:	79 f4       	brne	.+30     	; 0x4e6 <__addsf3x+0x34>
 4c8:	a6 f5       	brtc	.+104    	; 0x532 <__addsf3x+0x80>
 4ca:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_zero>
 4ce:	0e f4       	brtc	.+2      	; 0x4d2 <__addsf3x+0x20>
 4d0:	e0 95       	com	r30
 4d2:	0b 2e       	mov	r0, r27
 4d4:	ba 2f       	mov	r27, r26
 4d6:	a0 2d       	mov	r26, r0
 4d8:	0b 01       	movw	r0, r22
 4da:	b9 01       	movw	r22, r18
 4dc:	90 01       	movw	r18, r0
 4de:	0c 01       	movw	r0, r24
 4e0:	ca 01       	movw	r24, r20
 4e2:	a0 01       	movw	r20, r0
 4e4:	11 24       	eor	r1, r1
 4e6:	ff 27       	eor	r31, r31
 4e8:	59 1b       	sub	r21, r25
 4ea:	99 f0       	breq	.+38     	; 0x512 <__addsf3x+0x60>
 4ec:	59 3f       	cpi	r21, 0xF9	; 249
 4ee:	50 f4       	brcc	.+20     	; 0x504 <__addsf3x+0x52>
 4f0:	50 3e       	cpi	r21, 0xE0	; 224
 4f2:	68 f1       	brcs	.+90     	; 0x54e <__addsf3x+0x9c>
 4f4:	1a 16       	cp	r1, r26
 4f6:	f0 40       	sbci	r31, 0x00	; 0
 4f8:	a2 2f       	mov	r26, r18
 4fa:	23 2f       	mov	r18, r19
 4fc:	34 2f       	mov	r19, r20
 4fe:	44 27       	eor	r20, r20
 500:	58 5f       	subi	r21, 0xF8	; 248
 502:	f3 cf       	rjmp	.-26     	; 0x4ea <__addsf3x+0x38>
 504:	46 95       	lsr	r20
 506:	37 95       	ror	r19
 508:	27 95       	ror	r18
 50a:	a7 95       	ror	r26
 50c:	f0 40       	sbci	r31, 0x00	; 0
 50e:	53 95       	inc	r21
 510:	c9 f7       	brne	.-14     	; 0x504 <__addsf3x+0x52>
 512:	7e f4       	brtc	.+30     	; 0x532 <__addsf3x+0x80>
 514:	1f 16       	cp	r1, r31
 516:	ba 0b       	sbc	r27, r26
 518:	62 0b       	sbc	r22, r18
 51a:	73 0b       	sbc	r23, r19
 51c:	84 0b       	sbc	r24, r20
 51e:	ba f0       	brmi	.+46     	; 0x54e <__addsf3x+0x9c>
 520:	91 50       	subi	r25, 0x01	; 1
 522:	a1 f0       	breq	.+40     	; 0x54c <__addsf3x+0x9a>
 524:	ff 0f       	add	r31, r31
 526:	bb 1f       	adc	r27, r27
 528:	66 1f       	adc	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	c2 f7       	brpl	.-16     	; 0x520 <__addsf3x+0x6e>
 530:	0e c0       	rjmp	.+28     	; 0x54e <__addsf3x+0x9c>
 532:	ba 0f       	add	r27, r26
 534:	62 1f       	adc	r22, r18
 536:	73 1f       	adc	r23, r19
 538:	84 1f       	adc	r24, r20
 53a:	48 f4       	brcc	.+18     	; 0x54e <__addsf3x+0x9c>
 53c:	87 95       	ror	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f7 95       	ror	r31
 546:	9e 3f       	cpi	r25, 0xFE	; 254
 548:	08 f0       	brcs	.+2      	; 0x54c <__addsf3x+0x9a>
 54a:	b0 cf       	rjmp	.-160    	; 0x4ac <__addsf3+0x28>
 54c:	93 95       	inc	r25
 54e:	88 0f       	add	r24, r24
 550:	08 f0       	brcs	.+2      	; 0x554 <__addsf3x+0xa2>
 552:	99 27       	eor	r25, r25
 554:	ee 0f       	add	r30, r30
 556:	97 95       	ror	r25
 558:	87 95       	ror	r24
 55a:	08 95       	ret

0000055c <__fixunssfsi>:
 55c:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_splitA>
 560:	88 f0       	brcs	.+34     	; 0x584 <__fixunssfsi+0x28>
 562:	9f 57       	subi	r25, 0x7F	; 127
 564:	98 f0       	brcs	.+38     	; 0x58c <__fixunssfsi+0x30>
 566:	b9 2f       	mov	r27, r25
 568:	99 27       	eor	r25, r25
 56a:	b7 51       	subi	r27, 0x17	; 23
 56c:	b0 f0       	brcs	.+44     	; 0x59a <__fixunssfsi+0x3e>
 56e:	e1 f0       	breq	.+56     	; 0x5a8 <__fixunssfsi+0x4c>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	1a f0       	brmi	.+6      	; 0x580 <__fixunssfsi+0x24>
 57a:	ba 95       	dec	r27
 57c:	c9 f7       	brne	.-14     	; 0x570 <__fixunssfsi+0x14>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <__fixunssfsi+0x4c>
 580:	b1 30       	cpi	r27, 0x01	; 1
 582:	91 f0       	breq	.+36     	; 0x5a8 <__fixunssfsi+0x4c>
 584:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_zero>
 588:	b1 e0       	ldi	r27, 0x01	; 1
 58a:	08 95       	ret
 58c:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_zero>
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	b8 5f       	subi	r27, 0xF8	; 248
 598:	39 f0       	breq	.+14     	; 0x5a8 <__fixunssfsi+0x4c>
 59a:	b9 3f       	cpi	r27, 0xF9	; 249
 59c:	cc f3       	brlt	.-14     	; 0x590 <__fixunssfsi+0x34>
 59e:	86 95       	lsr	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b3 95       	inc	r27
 5a6:	d9 f7       	brne	.-10     	; 0x59e <__fixunssfsi+0x42>
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__fixunssfsi+0x5c>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__floatunsisf>:
 5ba:	e8 94       	clt
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__floatsisf+0x12>

000005be <__floatsisf>:
 5be:	97 fb       	bst	r25, 7
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__floatsisf+0x12>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	99 23       	and	r25, r25
 5d2:	a9 f0       	breq	.+42     	; 0x5fe <__floatsisf+0x40>
 5d4:	f9 2f       	mov	r31, r25
 5d6:	96 e9       	ldi	r25, 0x96	; 150
 5d8:	bb 27       	eor	r27, r27
 5da:	93 95       	inc	r25
 5dc:	f6 95       	lsr	r31
 5de:	87 95       	ror	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f1 11       	cpse	r31, r1
 5e8:	f8 cf       	rjmp	.-16     	; 0x5da <__floatsisf+0x1c>
 5ea:	fa f4       	brpl	.+62     	; 0x62a <__floatsisf+0x6c>
 5ec:	bb 0f       	add	r27, r27
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__floatsisf+0x36>
 5f0:	60 ff       	sbrs	r22, 0
 5f2:	1b c0       	rjmp	.+54     	; 0x62a <__floatsisf+0x6c>
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <__floatsisf+0x6c>
 5fe:	88 23       	and	r24, r24
 600:	11 f0       	breq	.+4      	; 0x606 <__floatsisf+0x48>
 602:	96 e9       	ldi	r25, 0x96	; 150
 604:	11 c0       	rjmp	.+34     	; 0x628 <__floatsisf+0x6a>
 606:	77 23       	and	r23, r23
 608:	21 f0       	breq	.+8      	; 0x612 <__floatsisf+0x54>
 60a:	9e e8       	ldi	r25, 0x8E	; 142
 60c:	87 2f       	mov	r24, r23
 60e:	76 2f       	mov	r23, r22
 610:	05 c0       	rjmp	.+10     	; 0x61c <__floatsisf+0x5e>
 612:	66 23       	and	r22, r22
 614:	71 f0       	breq	.+28     	; 0x632 <__floatsisf+0x74>
 616:	96 e8       	ldi	r25, 0x86	; 134
 618:	86 2f       	mov	r24, r22
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	2a f0       	brmi	.+10     	; 0x62a <__floatsisf+0x6c>
 620:	9a 95       	dec	r25
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	da f7       	brpl	.-10     	; 0x620 <__floatsisf+0x62>
 62a:	88 0f       	add	r24, r24
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__fp_inf>:
 634:	97 f9       	bld	r25, 7
 636:	9f 67       	ori	r25, 0x7F	; 127
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	08 95       	ret

00000640 <__fp_nan>:
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	80 ec       	ldi	r24, 0xC0	; 192
 644:	08 95       	ret

00000646 <__fp_pscA>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	16 16       	cp	r1, r22
 64c:	17 06       	cpc	r1, r23
 64e:	18 06       	cpc	r1, r24
 650:	09 06       	cpc	r0, r25
 652:	08 95       	ret

00000654 <__fp_pscB>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	14 06       	cpc	r1, r20
 65e:	05 06       	cpc	r0, r21
 660:	08 95       	ret

00000662 <__fp_round>:
 662:	09 2e       	mov	r0, r25
 664:	03 94       	inc	r0
 666:	00 0c       	add	r0, r0
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0xc>
 66a:	88 23       	and	r24, r24
 66c:	52 f0       	brmi	.+20     	; 0x682 <__fp_round+0x20>
 66e:	bb 0f       	add	r27, r27
 670:	40 f4       	brcc	.+16     	; 0x682 <__fp_round+0x20>
 672:	bf 2b       	or	r27, r31
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0x18>
 676:	60 ff       	sbrs	r22, 0
 678:	04 c0       	rjmp	.+8      	; 0x682 <__fp_round+0x20>
 67a:	6f 5f       	subi	r22, 0xFF	; 255
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__fp_split3>:
 684:	57 fd       	sbrc	r21, 7
 686:	90 58       	subi	r25, 0x80	; 128
 688:	44 0f       	add	r20, r20
 68a:	55 1f       	adc	r21, r21
 68c:	59 f0       	breq	.+22     	; 0x6a4 <__fp_splitA+0x10>
 68e:	5f 3f       	cpi	r21, 0xFF	; 255
 690:	71 f0       	breq	.+28     	; 0x6ae <__fp_splitA+0x1a>
 692:	47 95       	ror	r20

00000694 <__fp_splitA>:
 694:	88 0f       	add	r24, r24
 696:	97 fb       	bst	r25, 7
 698:	99 1f       	adc	r25, r25
 69a:	61 f0       	breq	.+24     	; 0x6b4 <__fp_splitA+0x20>
 69c:	9f 3f       	cpi	r25, 0xFF	; 255
 69e:	79 f0       	breq	.+30     	; 0x6be <__fp_splitA+0x2a>
 6a0:	87 95       	ror	r24
 6a2:	08 95       	ret
 6a4:	12 16       	cp	r1, r18
 6a6:	13 06       	cpc	r1, r19
 6a8:	14 06       	cpc	r1, r20
 6aa:	55 1f       	adc	r21, r21
 6ac:	f2 cf       	rjmp	.-28     	; 0x692 <__fp_split3+0xe>
 6ae:	46 95       	lsr	r20
 6b0:	f1 df       	rcall	.-30     	; 0x694 <__fp_splitA>
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <__fp_splitA+0x30>
 6b4:	16 16       	cp	r1, r22
 6b6:	17 06       	cpc	r1, r23
 6b8:	18 06       	cpc	r1, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	f1 cf       	rjmp	.-30     	; 0x6a0 <__fp_splitA+0xc>
 6be:	86 95       	lsr	r24
 6c0:	71 05       	cpc	r23, r1
 6c2:	61 05       	cpc	r22, r1
 6c4:	08 94       	sec
 6c6:	08 95       	ret

000006c8 <__fp_zero>:
 6c8:	e8 94       	clt

000006ca <__fp_szero>:
 6ca:	bb 27       	eor	r27, r27
 6cc:	66 27       	eor	r22, r22
 6ce:	77 27       	eor	r23, r23
 6d0:	cb 01       	movw	r24, r22
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret

000006d6 <__mulsf3>:
 6d6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3x>
 6da:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_round>
 6de:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscA>
 6e2:	38 f0       	brcs	.+14     	; 0x6f2 <__mulsf3+0x1c>
 6e4:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscB>
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__mulsf3+0x1c>
 6ea:	95 23       	and	r25, r21
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <__mulsf3+0x1c>
 6ee:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>
 6f2:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_nan>
 6f6:	11 24       	eor	r1, r1
 6f8:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_szero>

000006fc <__mulsf3x>:
 6fc:	0e 94 42 03 	call	0x684	; 0x684 <__fp_split3>
 700:	70 f3       	brcs	.-36     	; 0x6de <__mulsf3+0x8>

00000702 <__mulsf3_pse>:
 702:	95 9f       	mul	r25, r21
 704:	c1 f3       	breq	.-16     	; 0x6f6 <__mulsf3+0x20>
 706:	95 0f       	add	r25, r21
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	55 1f       	adc	r21, r21
 70c:	62 9f       	mul	r22, r18
 70e:	f0 01       	movw	r30, r0
 710:	72 9f       	mul	r23, r18
 712:	bb 27       	eor	r27, r27
 714:	f0 0d       	add	r31, r0
 716:	b1 1d       	adc	r27, r1
 718:	63 9f       	mul	r22, r19
 71a:	aa 27       	eor	r26, r26
 71c:	f0 0d       	add	r31, r0
 71e:	b1 1d       	adc	r27, r1
 720:	aa 1f       	adc	r26, r26
 722:	64 9f       	mul	r22, r20
 724:	66 27       	eor	r22, r22
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	66 1f       	adc	r22, r22
 72c:	82 9f       	mul	r24, r18
 72e:	22 27       	eor	r18, r18
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	62 1f       	adc	r22, r18
 736:	73 9f       	mul	r23, r19
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	62 1f       	adc	r22, r18
 73e:	83 9f       	mul	r24, r19
 740:	a0 0d       	add	r26, r0
 742:	61 1d       	adc	r22, r1
 744:	22 1f       	adc	r18, r18
 746:	74 9f       	mul	r23, r20
 748:	33 27       	eor	r19, r19
 74a:	a0 0d       	add	r26, r0
 74c:	61 1d       	adc	r22, r1
 74e:	23 1f       	adc	r18, r19
 750:	84 9f       	mul	r24, r20
 752:	60 0d       	add	r22, r0
 754:	21 1d       	adc	r18, r1
 756:	82 2f       	mov	r24, r18
 758:	76 2f       	mov	r23, r22
 75a:	6a 2f       	mov	r22, r26
 75c:	11 24       	eor	r1, r1
 75e:	9f 57       	subi	r25, 0x7F	; 127
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	9a f0       	brmi	.+38     	; 0x78a <__mulsf3_pse+0x88>
 764:	f1 f0       	breq	.+60     	; 0x7a2 <__mulsf3_pse+0xa0>
 766:	88 23       	and	r24, r24
 768:	4a f0       	brmi	.+18     	; 0x77c <__mulsf3_pse+0x7a>
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	bb 1f       	adc	r27, r27
 770:	66 1f       	adc	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	91 50       	subi	r25, 0x01	; 1
 778:	50 40       	sbci	r21, 0x00	; 0
 77a:	a9 f7       	brne	.-22     	; 0x766 <__mulsf3_pse+0x64>
 77c:	9e 3f       	cpi	r25, 0xFE	; 254
 77e:	51 05       	cpc	r21, r1
 780:	80 f0       	brcs	.+32     	; 0x7a2 <__mulsf3_pse+0xa0>
 782:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>
 786:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_szero>
 78a:	5f 3f       	cpi	r21, 0xFF	; 255
 78c:	e4 f3       	brlt	.-8      	; 0x786 <__mulsf3_pse+0x84>
 78e:	98 3e       	cpi	r25, 0xE8	; 232
 790:	d4 f3       	brlt	.-12     	; 0x786 <__mulsf3_pse+0x84>
 792:	86 95       	lsr	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f7 95       	ror	r31
 79c:	e7 95       	ror	r30
 79e:	9f 5f       	subi	r25, 0xFF	; 255
 7a0:	c1 f7       	brne	.-16     	; 0x792 <__mulsf3_pse+0x90>
 7a2:	fe 2b       	or	r31, r30
 7a4:	88 0f       	add	r24, r24
 7a6:	91 1d       	adc	r25, r1
 7a8:	96 95       	lsr	r25
 7aa:	87 95       	ror	r24
 7ac:	97 f9       	bld	r25, 7
 7ae:	08 95       	ret

000007b0 <__udivmodsi4>:
 7b0:	a1 e2       	ldi	r26, 0x21	; 33
 7b2:	1a 2e       	mov	r1, r26
 7b4:	aa 1b       	sub	r26, r26
 7b6:	bb 1b       	sub	r27, r27
 7b8:	fd 01       	movw	r30, r26
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <__udivmodsi4_ep>

000007bc <__udivmodsi4_loop>:
 7bc:	aa 1f       	adc	r26, r26
 7be:	bb 1f       	adc	r27, r27
 7c0:	ee 1f       	adc	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	a2 17       	cp	r26, r18
 7c6:	b3 07       	cpc	r27, r19
 7c8:	e4 07       	cpc	r30, r20
 7ca:	f5 07       	cpc	r31, r21
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__udivmodsi4_ep>
 7ce:	a2 1b       	sub	r26, r18
 7d0:	b3 0b       	sbc	r27, r19
 7d2:	e4 0b       	sbc	r30, r20
 7d4:	f5 0b       	sbc	r31, r21

000007d6 <__udivmodsi4_ep>:
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	1a 94       	dec	r1
 7e0:	69 f7       	brne	.-38     	; 0x7bc <__udivmodsi4_loop>
 7e2:	60 95       	com	r22
 7e4:	70 95       	com	r23
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	9b 01       	movw	r18, r22
 7ec:	ac 01       	movw	r20, r24
 7ee:	bd 01       	movw	r22, r26
 7f0:	cf 01       	movw	r24, r30
 7f2:	08 95       	ret

000007f4 <sprintf>:
 7f4:	ae e0       	ldi	r26, 0x0E	; 14
 7f6:	b0 e0       	ldi	r27, 0x00	; 0
 7f8:	e0 e0       	ldi	r30, 0x00	; 0
 7fa:	f4 e0       	ldi	r31, 0x04	; 4
 7fc:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__prologue_saves__+0x1c>
 800:	0d 89       	ldd	r16, Y+21	; 0x15
 802:	1e 89       	ldd	r17, Y+22	; 0x16
 804:	86 e0       	ldi	r24, 0x06	; 6
 806:	8c 83       	std	Y+4, r24	; 0x04
 808:	1a 83       	std	Y+2, r17	; 0x02
 80a:	09 83       	std	Y+1, r16	; 0x01
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	9f e7       	ldi	r25, 0x7F	; 127
 810:	9e 83       	std	Y+6, r25	; 0x06
 812:	8d 83       	std	Y+5, r24	; 0x05
 814:	ae 01       	movw	r20, r28
 816:	47 5e       	subi	r20, 0xE7	; 231
 818:	5f 4f       	sbci	r21, 0xFF	; 255
 81a:	6f 89       	ldd	r22, Y+23	; 0x17
 81c:	78 8d       	ldd	r23, Y+24	; 0x18
 81e:	ce 01       	movw	r24, r28
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	0e 94 1d 04 	call	0x83a	; 0x83a <vfprintf>
 826:	2f 81       	ldd	r18, Y+7	; 0x07
 828:	38 85       	ldd	r19, Y+8	; 0x08
 82a:	f8 01       	movw	r30, r16
 82c:	e2 0f       	add	r30, r18
 82e:	f3 1f       	adc	r31, r19
 830:	10 82       	st	Z, r1
 832:	2e 96       	adiw	r28, 0x0e	; 14
 834:	e4 e0       	ldi	r30, 0x04	; 4
 836:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__epilogue_restores__+0x1c>

0000083a <vfprintf>:
 83a:	ac e0       	ldi	r26, 0x0C	; 12
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	e3 e2       	ldi	r30, 0x23	; 35
 840:	f4 e0       	ldi	r31, 0x04	; 4
 842:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__prologue_saves__>
 846:	7c 01       	movw	r14, r24
 848:	6b 01       	movw	r12, r22
 84a:	8a 01       	movw	r16, r20
 84c:	fc 01       	movw	r30, r24
 84e:	17 82       	std	Z+7, r1	; 0x07
 850:	16 82       	std	Z+6, r1	; 0x06
 852:	83 81       	ldd	r24, Z+3	; 0x03
 854:	81 ff       	sbrs	r24, 1
 856:	bd c1       	rjmp	.+890    	; 0xbd2 <__stack+0x2d3>
 858:	ce 01       	movw	r24, r28
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	4c 01       	movw	r8, r24
 85e:	f7 01       	movw	r30, r14
 860:	93 81       	ldd	r25, Z+3	; 0x03
 862:	f6 01       	movw	r30, r12
 864:	93 fd       	sbrc	r25, 3
 866:	85 91       	lpm	r24, Z+
 868:	93 ff       	sbrs	r25, 3
 86a:	81 91       	ld	r24, Z+
 86c:	6f 01       	movw	r12, r30
 86e:	88 23       	and	r24, r24
 870:	09 f4       	brne	.+2      	; 0x874 <vfprintf+0x3a>
 872:	ab c1       	rjmp	.+854    	; 0xbca <__stack+0x2cb>
 874:	85 32       	cpi	r24, 0x25	; 37
 876:	39 f4       	brne	.+14     	; 0x886 <vfprintf+0x4c>
 878:	93 fd       	sbrc	r25, 3
 87a:	85 91       	lpm	r24, Z+
 87c:	93 ff       	sbrs	r25, 3
 87e:	81 91       	ld	r24, Z+
 880:	6f 01       	movw	r12, r30
 882:	85 32       	cpi	r24, 0x25	; 37
 884:	29 f4       	brne	.+10     	; 0x890 <vfprintf+0x56>
 886:	b7 01       	movw	r22, r14
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 88e:	e7 cf       	rjmp	.-50     	; 0x85e <vfprintf+0x24>
 890:	51 2c       	mov	r5, r1
 892:	31 2c       	mov	r3, r1
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	20 32       	cpi	r18, 0x20	; 32
 898:	a0 f4       	brcc	.+40     	; 0x8c2 <vfprintf+0x88>
 89a:	8b 32       	cpi	r24, 0x2B	; 43
 89c:	69 f0       	breq	.+26     	; 0x8b8 <vfprintf+0x7e>
 89e:	30 f4       	brcc	.+12     	; 0x8ac <vfprintf+0x72>
 8a0:	80 32       	cpi	r24, 0x20	; 32
 8a2:	59 f0       	breq	.+22     	; 0x8ba <vfprintf+0x80>
 8a4:	83 32       	cpi	r24, 0x23	; 35
 8a6:	69 f4       	brne	.+26     	; 0x8c2 <vfprintf+0x88>
 8a8:	20 61       	ori	r18, 0x10	; 16
 8aa:	2c c0       	rjmp	.+88     	; 0x904 <__stack+0x5>
 8ac:	8d 32       	cpi	r24, 0x2D	; 45
 8ae:	39 f0       	breq	.+14     	; 0x8be <vfprintf+0x84>
 8b0:	80 33       	cpi	r24, 0x30	; 48
 8b2:	39 f4       	brne	.+14     	; 0x8c2 <vfprintf+0x88>
 8b4:	21 60       	ori	r18, 0x01	; 1
 8b6:	26 c0       	rjmp	.+76     	; 0x904 <__stack+0x5>
 8b8:	22 60       	ori	r18, 0x02	; 2
 8ba:	24 60       	ori	r18, 0x04	; 4
 8bc:	23 c0       	rjmp	.+70     	; 0x904 <__stack+0x5>
 8be:	28 60       	ori	r18, 0x08	; 8
 8c0:	21 c0       	rjmp	.+66     	; 0x904 <__stack+0x5>
 8c2:	27 fd       	sbrc	r18, 7
 8c4:	27 c0       	rjmp	.+78     	; 0x914 <__stack+0x15>
 8c6:	30 ed       	ldi	r19, 0xD0	; 208
 8c8:	38 0f       	add	r19, r24
 8ca:	3a 30       	cpi	r19, 0x0A	; 10
 8cc:	78 f4       	brcc	.+30     	; 0x8ec <vfprintf+0xb2>
 8ce:	26 ff       	sbrs	r18, 6
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <vfprintf+0xa4>
 8d2:	fa e0       	ldi	r31, 0x0A	; 10
 8d4:	5f 9e       	mul	r5, r31
 8d6:	30 0d       	add	r19, r0
 8d8:	11 24       	eor	r1, r1
 8da:	53 2e       	mov	r5, r19
 8dc:	13 c0       	rjmp	.+38     	; 0x904 <__stack+0x5>
 8de:	8a e0       	ldi	r24, 0x0A	; 10
 8e0:	38 9e       	mul	r3, r24
 8e2:	30 0d       	add	r19, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	33 2e       	mov	r3, r19
 8e8:	20 62       	ori	r18, 0x20	; 32
 8ea:	0c c0       	rjmp	.+24     	; 0x904 <__stack+0x5>
 8ec:	8e 32       	cpi	r24, 0x2E	; 46
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <vfprintf+0xbe>
 8f0:	26 fd       	sbrc	r18, 6
 8f2:	6b c1       	rjmp	.+726    	; 0xbca <__stack+0x2cb>
 8f4:	20 64       	ori	r18, 0x40	; 64
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <__stack+0x5>
 8f8:	8c 36       	cpi	r24, 0x6C	; 108
 8fa:	11 f4       	brne	.+4      	; 0x900 <__stack+0x1>
 8fc:	20 68       	ori	r18, 0x80	; 128
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
 900:	88 36       	cpi	r24, 0x68	; 104
 902:	41 f4       	brne	.+16     	; 0x914 <__stack+0x15>
 904:	f6 01       	movw	r30, r12
 906:	93 fd       	sbrc	r25, 3
 908:	85 91       	lpm	r24, Z+
 90a:	93 ff       	sbrs	r25, 3
 90c:	81 91       	ld	r24, Z+
 90e:	6f 01       	movw	r12, r30
 910:	81 11       	cpse	r24, r1
 912:	c1 cf       	rjmp	.-126    	; 0x896 <vfprintf+0x5c>
 914:	98 2f       	mov	r25, r24
 916:	9f 7d       	andi	r25, 0xDF	; 223
 918:	95 54       	subi	r25, 0x45	; 69
 91a:	93 30       	cpi	r25, 0x03	; 3
 91c:	28 f4       	brcc	.+10     	; 0x928 <__stack+0x29>
 91e:	0c 5f       	subi	r16, 0xFC	; 252
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	ff e3       	ldi	r31, 0x3F	; 63
 924:	f9 83       	std	Y+1, r31	; 0x01
 926:	0d c0       	rjmp	.+26     	; 0x942 <__stack+0x43>
 928:	83 36       	cpi	r24, 0x63	; 99
 92a:	31 f0       	breq	.+12     	; 0x938 <__stack+0x39>
 92c:	83 37       	cpi	r24, 0x73	; 115
 92e:	71 f0       	breq	.+28     	; 0x94c <__stack+0x4d>
 930:	83 35       	cpi	r24, 0x53	; 83
 932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
 934:	5b c0       	rjmp	.+182    	; 0x9ec <__stack+0xed>
 936:	22 c0       	rjmp	.+68     	; 0x97c <__stack+0x7d>
 938:	f8 01       	movw	r30, r16
 93a:	80 81       	ld	r24, Z
 93c:	89 83       	std	Y+1, r24	; 0x01
 93e:	0e 5f       	subi	r16, 0xFE	; 254
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	44 24       	eor	r4, r4
 944:	43 94       	inc	r4
 946:	51 2c       	mov	r5, r1
 948:	54 01       	movw	r10, r8
 94a:	15 c0       	rjmp	.+42     	; 0x976 <__stack+0x77>
 94c:	38 01       	movw	r6, r16
 94e:	f2 e0       	ldi	r31, 0x02	; 2
 950:	6f 0e       	add	r6, r31
 952:	71 1c       	adc	r7, r1
 954:	f8 01       	movw	r30, r16
 956:	a0 80       	ld	r10, Z
 958:	b1 80       	ldd	r11, Z+1	; 0x01
 95a:	26 ff       	sbrs	r18, 6
 95c:	03 c0       	rjmp	.+6      	; 0x964 <__stack+0x65>
 95e:	65 2d       	mov	r22, r5
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
 964:	6f ef       	ldi	r22, 0xFF	; 255
 966:	7f ef       	ldi	r23, 0xFF	; 255
 968:	c5 01       	movw	r24, r10
 96a:	2c 87       	std	Y+12, r18	; 0x0c
 96c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <strnlen>
 970:	2c 01       	movw	r4, r24
 972:	83 01       	movw	r16, r6
 974:	2c 85       	ldd	r18, Y+12	; 0x0c
 976:	2f 77       	andi	r18, 0x7F	; 127
 978:	22 2e       	mov	r2, r18
 97a:	17 c0       	rjmp	.+46     	; 0x9aa <__stack+0xab>
 97c:	38 01       	movw	r6, r16
 97e:	f2 e0       	ldi	r31, 0x02	; 2
 980:	6f 0e       	add	r6, r31
 982:	71 1c       	adc	r7, r1
 984:	f8 01       	movw	r30, r16
 986:	a0 80       	ld	r10, Z
 988:	b1 80       	ldd	r11, Z+1	; 0x01
 98a:	26 ff       	sbrs	r18, 6
 98c:	03 c0       	rjmp	.+6      	; 0x994 <__stack+0x95>
 98e:	65 2d       	mov	r22, r5
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
 994:	6f ef       	ldi	r22, 0xFF	; 255
 996:	7f ef       	ldi	r23, 0xFF	; 255
 998:	c5 01       	movw	r24, r10
 99a:	2c 87       	std	Y+12, r18	; 0x0c
 99c:	0e 94 ef 05 	call	0xbde	; 0xbde <strnlen_P>
 9a0:	2c 01       	movw	r4, r24
 9a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 9a4:	20 68       	ori	r18, 0x80	; 128
 9a6:	22 2e       	mov	r2, r18
 9a8:	83 01       	movw	r16, r6
 9aa:	23 fc       	sbrc	r2, 3
 9ac:	1b c0       	rjmp	.+54     	; 0x9e4 <__stack+0xe5>
 9ae:	83 2d       	mov	r24, r3
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	48 16       	cp	r4, r24
 9b4:	59 06       	cpc	r5, r25
 9b6:	b0 f4       	brcc	.+44     	; 0x9e4 <__stack+0xe5>
 9b8:	b7 01       	movw	r22, r14
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 9c2:	3a 94       	dec	r3
 9c4:	f4 cf       	rjmp	.-24     	; 0x9ae <__stack+0xaf>
 9c6:	f5 01       	movw	r30, r10
 9c8:	27 fc       	sbrc	r2, 7
 9ca:	85 91       	lpm	r24, Z+
 9cc:	27 fe       	sbrs	r2, 7
 9ce:	81 91       	ld	r24, Z+
 9d0:	5f 01       	movw	r10, r30
 9d2:	b7 01       	movw	r22, r14
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 9da:	31 10       	cpse	r3, r1
 9dc:	3a 94       	dec	r3
 9de:	f1 e0       	ldi	r31, 0x01	; 1
 9e0:	4f 1a       	sub	r4, r31
 9e2:	51 08       	sbc	r5, r1
 9e4:	41 14       	cp	r4, r1
 9e6:	51 04       	cpc	r5, r1
 9e8:	71 f7       	brne	.-36     	; 0x9c6 <__stack+0xc7>
 9ea:	e5 c0       	rjmp	.+458    	; 0xbb6 <__stack+0x2b7>
 9ec:	84 36       	cpi	r24, 0x64	; 100
 9ee:	11 f0       	breq	.+4      	; 0x9f4 <__stack+0xf5>
 9f0:	89 36       	cpi	r24, 0x69	; 105
 9f2:	39 f5       	brne	.+78     	; 0xa42 <__stack+0x143>
 9f4:	f8 01       	movw	r30, r16
 9f6:	27 ff       	sbrs	r18, 7
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__stack+0x109>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	82 81       	ldd	r24, Z+2	; 0x02
 a00:	93 81       	ldd	r25, Z+3	; 0x03
 a02:	0c 5f       	subi	r16, 0xFC	; 252
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	08 c0       	rjmp	.+16     	; 0xa18 <__stack+0x119>
 a08:	60 81       	ld	r22, Z
 a0a:	71 81       	ldd	r23, Z+1	; 0x01
 a0c:	07 2e       	mov	r0, r23
 a0e:	00 0c       	add	r0, r0
 a10:	88 0b       	sbc	r24, r24
 a12:	99 0b       	sbc	r25, r25
 a14:	0e 5f       	subi	r16, 0xFE	; 254
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	2f 76       	andi	r18, 0x6F	; 111
 a1a:	72 2e       	mov	r7, r18
 a1c:	97 ff       	sbrs	r25, 7
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__stack+0x133>
 a20:	90 95       	com	r25
 a22:	80 95       	com	r24
 a24:	70 95       	com	r23
 a26:	61 95       	neg	r22
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	20 68       	ori	r18, 0x80	; 128
 a30:	72 2e       	mov	r7, r18
 a32:	2a e0       	ldi	r18, 0x0A	; 10
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	a4 01       	movw	r20, r8
 a38:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__ultoa_invert>
 a3c:	a8 2e       	mov	r10, r24
 a3e:	a8 18       	sub	r10, r8
 a40:	44 c0       	rjmp	.+136    	; 0xaca <__stack+0x1cb>
 a42:	85 37       	cpi	r24, 0x75	; 117
 a44:	29 f4       	brne	.+10     	; 0xa50 <__stack+0x151>
 a46:	2f 7e       	andi	r18, 0xEF	; 239
 a48:	b2 2e       	mov	r11, r18
 a4a:	2a e0       	ldi	r18, 0x0A	; 10
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	25 c0       	rjmp	.+74     	; 0xa9a <__stack+0x19b>
 a50:	f2 2f       	mov	r31, r18
 a52:	f9 7f       	andi	r31, 0xF9	; 249
 a54:	bf 2e       	mov	r11, r31
 a56:	8f 36       	cpi	r24, 0x6F	; 111
 a58:	c1 f0       	breq	.+48     	; 0xa8a <__stack+0x18b>
 a5a:	18 f4       	brcc	.+6      	; 0xa62 <__stack+0x163>
 a5c:	88 35       	cpi	r24, 0x58	; 88
 a5e:	79 f0       	breq	.+30     	; 0xa7e <__stack+0x17f>
 a60:	b4 c0       	rjmp	.+360    	; 0xbca <__stack+0x2cb>
 a62:	80 37       	cpi	r24, 0x70	; 112
 a64:	19 f0       	breq	.+6      	; 0xa6c <__stack+0x16d>
 a66:	88 37       	cpi	r24, 0x78	; 120
 a68:	21 f0       	breq	.+8      	; 0xa72 <__stack+0x173>
 a6a:	af c0       	rjmp	.+350    	; 0xbca <__stack+0x2cb>
 a6c:	2f 2f       	mov	r18, r31
 a6e:	20 61       	ori	r18, 0x10	; 16
 a70:	b2 2e       	mov	r11, r18
 a72:	b4 fe       	sbrs	r11, 4
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <__stack+0x191>
 a76:	8b 2d       	mov	r24, r11
 a78:	84 60       	ori	r24, 0x04	; 4
 a7a:	b8 2e       	mov	r11, r24
 a7c:	09 c0       	rjmp	.+18     	; 0xa90 <__stack+0x191>
 a7e:	24 ff       	sbrs	r18, 4
 a80:	0a c0       	rjmp	.+20     	; 0xa96 <__stack+0x197>
 a82:	9f 2f       	mov	r25, r31
 a84:	96 60       	ori	r25, 0x06	; 6
 a86:	b9 2e       	mov	r11, r25
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <__stack+0x197>
 a8a:	28 e0       	ldi	r18, 0x08	; 8
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	05 c0       	rjmp	.+10     	; 0xa9a <__stack+0x19b>
 a90:	20 e1       	ldi	r18, 0x10	; 16
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
 a96:	20 e1       	ldi	r18, 0x10	; 16
 a98:	32 e0       	ldi	r19, 0x02	; 2
 a9a:	f8 01       	movw	r30, r16
 a9c:	b7 fe       	sbrs	r11, 7
 a9e:	07 c0       	rjmp	.+14     	; 0xaae <__stack+0x1af>
 aa0:	60 81       	ld	r22, Z
 aa2:	71 81       	ldd	r23, Z+1	; 0x01
 aa4:	82 81       	ldd	r24, Z+2	; 0x02
 aa6:	93 81       	ldd	r25, Z+3	; 0x03
 aa8:	0c 5f       	subi	r16, 0xFC	; 252
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	06 c0       	rjmp	.+12     	; 0xaba <__stack+0x1bb>
 aae:	60 81       	ld	r22, Z
 ab0:	71 81       	ldd	r23, Z+1	; 0x01
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 5f       	subi	r16, 0xFE	; 254
 ab8:	1f 4f       	sbci	r17, 0xFF	; 255
 aba:	a4 01       	movw	r20, r8
 abc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__ultoa_invert>
 ac0:	a8 2e       	mov	r10, r24
 ac2:	a8 18       	sub	r10, r8
 ac4:	fb 2d       	mov	r31, r11
 ac6:	ff 77       	andi	r31, 0x7F	; 127
 ac8:	7f 2e       	mov	r7, r31
 aca:	76 fe       	sbrs	r7, 6
 acc:	0b c0       	rjmp	.+22     	; 0xae4 <__stack+0x1e5>
 ace:	37 2d       	mov	r19, r7
 ad0:	3e 7f       	andi	r19, 0xFE	; 254
 ad2:	a5 14       	cp	r10, r5
 ad4:	50 f4       	brcc	.+20     	; 0xaea <__stack+0x1eb>
 ad6:	74 fe       	sbrs	r7, 4
 ad8:	0a c0       	rjmp	.+20     	; 0xaee <__stack+0x1ef>
 ada:	72 fc       	sbrc	r7, 2
 adc:	08 c0       	rjmp	.+16     	; 0xaee <__stack+0x1ef>
 ade:	37 2d       	mov	r19, r7
 ae0:	3e 7e       	andi	r19, 0xEE	; 238
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <__stack+0x1ef>
 ae4:	ba 2c       	mov	r11, r10
 ae6:	37 2d       	mov	r19, r7
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <__stack+0x1f1>
 aea:	ba 2c       	mov	r11, r10
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <__stack+0x1f1>
 aee:	b5 2c       	mov	r11, r5
 af0:	34 ff       	sbrs	r19, 4
 af2:	0d c0       	rjmp	.+26     	; 0xb0e <__stack+0x20f>
 af4:	fe 01       	movw	r30, r28
 af6:	ea 0d       	add	r30, r10
 af8:	f1 1d       	adc	r31, r1
 afa:	80 81       	ld	r24, Z
 afc:	80 33       	cpi	r24, 0x30	; 48
 afe:	11 f4       	brne	.+4      	; 0xb04 <__stack+0x205>
 b00:	39 7e       	andi	r19, 0xE9	; 233
 b02:	09 c0       	rjmp	.+18     	; 0xb16 <__stack+0x217>
 b04:	32 ff       	sbrs	r19, 2
 b06:	06 c0       	rjmp	.+12     	; 0xb14 <__stack+0x215>
 b08:	b3 94       	inc	r11
 b0a:	b3 94       	inc	r11
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__stack+0x217>
 b0e:	83 2f       	mov	r24, r19
 b10:	86 78       	andi	r24, 0x86	; 134
 b12:	09 f0       	breq	.+2      	; 0xb16 <__stack+0x217>
 b14:	b3 94       	inc	r11
 b16:	33 fd       	sbrc	r19, 3
 b18:	13 c0       	rjmp	.+38     	; 0xb40 <__stack+0x241>
 b1a:	30 ff       	sbrs	r19, 0
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <__stack+0x22b>
 b1e:	5a 2c       	mov	r5, r10
 b20:	b3 14       	cp	r11, r3
 b22:	18 f4       	brcc	.+6      	; 0xb2a <__stack+0x22b>
 b24:	53 0c       	add	r5, r3
 b26:	5b 18       	sub	r5, r11
 b28:	b3 2c       	mov	r11, r3
 b2a:	b3 14       	cp	r11, r3
 b2c:	68 f4       	brcc	.+26     	; 0xb48 <__stack+0x249>
 b2e:	b7 01       	movw	r22, r14
 b30:	80 e2       	ldi	r24, 0x20	; 32
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	3c 87       	std	Y+12, r19	; 0x0c
 b36:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b3a:	b3 94       	inc	r11
 b3c:	3c 85       	ldd	r19, Y+12	; 0x0c
 b3e:	f5 cf       	rjmp	.-22     	; 0xb2a <__stack+0x22b>
 b40:	b3 14       	cp	r11, r3
 b42:	10 f4       	brcc	.+4      	; 0xb48 <__stack+0x249>
 b44:	3b 18       	sub	r3, r11
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <__stack+0x24b>
 b48:	31 2c       	mov	r3, r1
 b4a:	34 ff       	sbrs	r19, 4
 b4c:	12 c0       	rjmp	.+36     	; 0xb72 <__stack+0x273>
 b4e:	b7 01       	movw	r22, r14
 b50:	80 e3       	ldi	r24, 0x30	; 48
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	3c 87       	std	Y+12, r19	; 0x0c
 b56:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b5a:	3c 85       	ldd	r19, Y+12	; 0x0c
 b5c:	32 ff       	sbrs	r19, 2
 b5e:	17 c0       	rjmp	.+46     	; 0xb8e <__stack+0x28f>
 b60:	31 fd       	sbrc	r19, 1
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <__stack+0x26b>
 b64:	88 e7       	ldi	r24, 0x78	; 120
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <__stack+0x26f>
 b6a:	88 e5       	ldi	r24, 0x58	; 88
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	b7 01       	movw	r22, r14
 b70:	0c c0       	rjmp	.+24     	; 0xb8a <__stack+0x28b>
 b72:	83 2f       	mov	r24, r19
 b74:	86 78       	andi	r24, 0x86	; 134
 b76:	59 f0       	breq	.+22     	; 0xb8e <__stack+0x28f>
 b78:	31 ff       	sbrs	r19, 1
 b7a:	02 c0       	rjmp	.+4      	; 0xb80 <__stack+0x281>
 b7c:	8b e2       	ldi	r24, 0x2B	; 43
 b7e:	01 c0       	rjmp	.+2      	; 0xb82 <__stack+0x283>
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	37 fd       	sbrc	r19, 7
 b84:	8d e2       	ldi	r24, 0x2D	; 45
 b86:	b7 01       	movw	r22, r14
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b8e:	a5 14       	cp	r10, r5
 b90:	38 f4       	brcc	.+14     	; 0xba0 <__stack+0x2a1>
 b92:	b7 01       	movw	r22, r14
 b94:	80 e3       	ldi	r24, 0x30	; 48
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b9c:	5a 94       	dec	r5
 b9e:	f7 cf       	rjmp	.-18     	; 0xb8e <__stack+0x28f>
 ba0:	aa 94       	dec	r10
 ba2:	f4 01       	movw	r30, r8
 ba4:	ea 0d       	add	r30, r10
 ba6:	f1 1d       	adc	r31, r1
 ba8:	80 81       	ld	r24, Z
 baa:	b7 01       	movw	r22, r14
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 bb2:	a1 10       	cpse	r10, r1
 bb4:	f5 cf       	rjmp	.-22     	; 0xba0 <__stack+0x2a1>
 bb6:	33 20       	and	r3, r3
 bb8:	09 f4       	brne	.+2      	; 0xbbc <__stack+0x2bd>
 bba:	51 ce       	rjmp	.-862    	; 0x85e <vfprintf+0x24>
 bbc:	b7 01       	movw	r22, r14
 bbe:	80 e2       	ldi	r24, 0x20	; 32
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 bc6:	3a 94       	dec	r3
 bc8:	f6 cf       	rjmp	.-20     	; 0xbb6 <__stack+0x2b7>
 bca:	f7 01       	movw	r30, r14
 bcc:	86 81       	ldd	r24, Z+6	; 0x06
 bce:	97 81       	ldd	r25, Z+7	; 0x07
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__stack+0x2d7>
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	9f ef       	ldi	r25, 0xFF	; 255
 bd6:	2c 96       	adiw	r28, 0x0c	; 12
 bd8:	e2 e1       	ldi	r30, 0x12	; 18
 bda:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__epilogue_restores__>

00000bde <strnlen_P>:
 bde:	fc 01       	movw	r30, r24
 be0:	05 90       	lpm	r0, Z+
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	01 10       	cpse	r0, r1
 be8:	d8 f7       	brcc	.-10     	; 0xbe0 <strnlen_P+0x2>
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	8e 0f       	add	r24, r30
 bf0:	9f 1f       	adc	r25, r31
 bf2:	08 95       	ret

00000bf4 <strnlen>:
 bf4:	fc 01       	movw	r30, r24
 bf6:	61 50       	subi	r22, 0x01	; 1
 bf8:	70 40       	sbci	r23, 0x00	; 0
 bfa:	01 90       	ld	r0, Z+
 bfc:	01 10       	cpse	r0, r1
 bfe:	d8 f7       	brcc	.-10     	; 0xbf6 <strnlen+0x2>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	8e 0f       	add	r24, r30
 c06:	9f 1f       	adc	r25, r31
 c08:	08 95       	ret

00000c0a <fputc>:
 c0a:	0f 93       	push	r16
 c0c:	1f 93       	push	r17
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	fb 01       	movw	r30, r22
 c14:	23 81       	ldd	r18, Z+3	; 0x03
 c16:	21 fd       	sbrc	r18, 1
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <fputc+0x16>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	28 c0       	rjmp	.+80     	; 0xc70 <fputc+0x66>
 c20:	22 ff       	sbrs	r18, 2
 c22:	16 c0       	rjmp	.+44     	; 0xc50 <fputc+0x46>
 c24:	46 81       	ldd	r20, Z+6	; 0x06
 c26:	57 81       	ldd	r21, Z+7	; 0x07
 c28:	24 81       	ldd	r18, Z+4	; 0x04
 c2a:	35 81       	ldd	r19, Z+5	; 0x05
 c2c:	42 17       	cp	r20, r18
 c2e:	53 07       	cpc	r21, r19
 c30:	44 f4       	brge	.+16     	; 0xc42 <fputc+0x38>
 c32:	a0 81       	ld	r26, Z
 c34:	b1 81       	ldd	r27, Z+1	; 0x01
 c36:	9d 01       	movw	r18, r26
 c38:	2f 5f       	subi	r18, 0xFF	; 255
 c3a:	3f 4f       	sbci	r19, 0xFF	; 255
 c3c:	31 83       	std	Z+1, r19	; 0x01
 c3e:	20 83       	st	Z, r18
 c40:	8c 93       	st	X, r24
 c42:	26 81       	ldd	r18, Z+6	; 0x06
 c44:	37 81       	ldd	r19, Z+7	; 0x07
 c46:	2f 5f       	subi	r18, 0xFF	; 255
 c48:	3f 4f       	sbci	r19, 0xFF	; 255
 c4a:	37 83       	std	Z+7, r19	; 0x07
 c4c:	26 83       	std	Z+6, r18	; 0x06
 c4e:	10 c0       	rjmp	.+32     	; 0xc70 <fputc+0x66>
 c50:	eb 01       	movw	r28, r22
 c52:	09 2f       	mov	r16, r25
 c54:	18 2f       	mov	r17, r24
 c56:	00 84       	ldd	r0, Z+8	; 0x08
 c58:	f1 85       	ldd	r31, Z+9	; 0x09
 c5a:	e0 2d       	mov	r30, r0
 c5c:	09 95       	icall
 c5e:	89 2b       	or	r24, r25
 c60:	e1 f6       	brne	.-72     	; 0xc1a <fputc+0x10>
 c62:	8e 81       	ldd	r24, Y+6	; 0x06
 c64:	9f 81       	ldd	r25, Y+7	; 0x07
 c66:	01 96       	adiw	r24, 0x01	; 1
 c68:	9f 83       	std	Y+7, r25	; 0x07
 c6a:	8e 83       	std	Y+6, r24	; 0x06
 c6c:	81 2f       	mov	r24, r17
 c6e:	90 2f       	mov	r25, r16
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	1f 91       	pop	r17
 c76:	0f 91       	pop	r16
 c78:	08 95       	ret

00000c7a <__ultoa_invert>:
 c7a:	fa 01       	movw	r30, r20
 c7c:	aa 27       	eor	r26, r26
 c7e:	28 30       	cpi	r18, 0x08	; 8
 c80:	51 f1       	breq	.+84     	; 0xcd6 <__ultoa_invert+0x5c>
 c82:	20 31       	cpi	r18, 0x10	; 16
 c84:	81 f1       	breq	.+96     	; 0xce6 <__ultoa_invert+0x6c>
 c86:	e8 94       	clt
 c88:	6f 93       	push	r22
 c8a:	6e 7f       	andi	r22, 0xFE	; 254
 c8c:	6e 5f       	subi	r22, 0xFE	; 254
 c8e:	7f 4f       	sbci	r23, 0xFF	; 255
 c90:	8f 4f       	sbci	r24, 0xFF	; 255
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	af 4f       	sbci	r26, 0xFF	; 255
 c96:	b1 e0       	ldi	r27, 0x01	; 1
 c98:	3e d0       	rcall	.+124    	; 0xd16 <__ultoa_invert+0x9c>
 c9a:	b4 e0       	ldi	r27, 0x04	; 4
 c9c:	3c d0       	rcall	.+120    	; 0xd16 <__ultoa_invert+0x9c>
 c9e:	67 0f       	add	r22, r23
 ca0:	78 1f       	adc	r23, r24
 ca2:	89 1f       	adc	r24, r25
 ca4:	9a 1f       	adc	r25, r26
 ca6:	a1 1d       	adc	r26, r1
 ca8:	68 0f       	add	r22, r24
 caa:	79 1f       	adc	r23, r25
 cac:	8a 1f       	adc	r24, r26
 cae:	91 1d       	adc	r25, r1
 cb0:	a1 1d       	adc	r26, r1
 cb2:	6a 0f       	add	r22, r26
 cb4:	71 1d       	adc	r23, r1
 cb6:	81 1d       	adc	r24, r1
 cb8:	91 1d       	adc	r25, r1
 cba:	a1 1d       	adc	r26, r1
 cbc:	20 d0       	rcall	.+64     	; 0xcfe <__ultoa_invert+0x84>
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <__ultoa_invert+0x48>
 cc0:	68 94       	set
 cc2:	3f 91       	pop	r19
 cc4:	2a e0       	ldi	r18, 0x0A	; 10
 cc6:	26 9f       	mul	r18, r22
 cc8:	11 24       	eor	r1, r1
 cca:	30 19       	sub	r19, r0
 ccc:	30 5d       	subi	r19, 0xD0	; 208
 cce:	31 93       	st	Z+, r19
 cd0:	de f6       	brtc	.-74     	; 0xc88 <__ultoa_invert+0xe>
 cd2:	cf 01       	movw	r24, r30
 cd4:	08 95       	ret
 cd6:	46 2f       	mov	r20, r22
 cd8:	47 70       	andi	r20, 0x07	; 7
 cda:	40 5d       	subi	r20, 0xD0	; 208
 cdc:	41 93       	st	Z+, r20
 cde:	b3 e0       	ldi	r27, 0x03	; 3
 ce0:	0f d0       	rcall	.+30     	; 0xd00 <__ultoa_invert+0x86>
 ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__ultoa_invert+0x5c>
 ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <__ultoa_invert+0x58>
 ce6:	46 2f       	mov	r20, r22
 ce8:	4f 70       	andi	r20, 0x0F	; 15
 cea:	40 5d       	subi	r20, 0xD0	; 208
 cec:	4a 33       	cpi	r20, 0x3A	; 58
 cee:	18 f0       	brcs	.+6      	; 0xcf6 <__ultoa_invert+0x7c>
 cf0:	49 5d       	subi	r20, 0xD9	; 217
 cf2:	31 fd       	sbrc	r19, 1
 cf4:	40 52       	subi	r20, 0x20	; 32
 cf6:	41 93       	st	Z+, r20
 cf8:	02 d0       	rcall	.+4      	; 0xcfe <__ultoa_invert+0x84>
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__ultoa_invert+0x6c>
 cfc:	ea cf       	rjmp	.-44     	; 0xcd2 <__ultoa_invert+0x58>
 cfe:	b4 e0       	ldi	r27, 0x04	; 4
 d00:	a6 95       	lsr	r26
 d02:	97 95       	ror	r25
 d04:	87 95       	ror	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	ba 95       	dec	r27
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0x86>
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	61 05       	cpc	r22, r1
 d12:	71 05       	cpc	r23, r1
 d14:	08 95       	ret
 d16:	9b 01       	movw	r18, r22
 d18:	ac 01       	movw	r20, r24
 d1a:	0a 2e       	mov	r0, r26
 d1c:	06 94       	lsr	r0
 d1e:	57 95       	ror	r21
 d20:	47 95       	ror	r20
 d22:	37 95       	ror	r19
 d24:	27 95       	ror	r18
 d26:	ba 95       	dec	r27
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0xa2>
 d2a:	62 0f       	add	r22, r18
 d2c:	73 1f       	adc	r23, r19
 d2e:	84 1f       	adc	r24, r20
 d30:	95 1f       	adc	r25, r21
 d32:	a0 1d       	adc	r26, r0
 d34:	08 95       	ret

00000d36 <__prologue_saves__>:
 d36:	2f 92       	push	r2
 d38:	3f 92       	push	r3
 d3a:	4f 92       	push	r4
 d3c:	5f 92       	push	r5
 d3e:	6f 92       	push	r6
 d40:	7f 92       	push	r7
 d42:	8f 92       	push	r8
 d44:	9f 92       	push	r9
 d46:	af 92       	push	r10
 d48:	bf 92       	push	r11
 d4a:	cf 92       	push	r12
 d4c:	df 92       	push	r13
 d4e:	ef 92       	push	r14
 d50:	ff 92       	push	r15
 d52:	0f 93       	push	r16
 d54:	1f 93       	push	r17
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	cd b7       	in	r28, 0x3d	; 61
 d5c:	de b7       	in	r29, 0x3e	; 62
 d5e:	ca 1b       	sub	r28, r26
 d60:	db 0b       	sbc	r29, r27
 d62:	0f b6       	in	r0, 0x3f	; 63
 d64:	f8 94       	cli
 d66:	de bf       	out	0x3e, r29	; 62
 d68:	0f be       	out	0x3f, r0	; 63
 d6a:	cd bf       	out	0x3d, r28	; 61
 d6c:	09 94       	ijmp

00000d6e <__epilogue_restores__>:
 d6e:	2a 88       	ldd	r2, Y+18	; 0x12
 d70:	39 88       	ldd	r3, Y+17	; 0x11
 d72:	48 88       	ldd	r4, Y+16	; 0x10
 d74:	5f 84       	ldd	r5, Y+15	; 0x0f
 d76:	6e 84       	ldd	r6, Y+14	; 0x0e
 d78:	7d 84       	ldd	r7, Y+13	; 0x0d
 d7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d80:	b9 84       	ldd	r11, Y+9	; 0x09
 d82:	c8 84       	ldd	r12, Y+8	; 0x08
 d84:	df 80       	ldd	r13, Y+7	; 0x07
 d86:	ee 80       	ldd	r14, Y+6	; 0x06
 d88:	fd 80       	ldd	r15, Y+5	; 0x05
 d8a:	0c 81       	ldd	r16, Y+4	; 0x04
 d8c:	1b 81       	ldd	r17, Y+3	; 0x03
 d8e:	aa 81       	ldd	r26, Y+2	; 0x02
 d90:	b9 81       	ldd	r27, Y+1	; 0x01
 d92:	ce 0f       	add	r28, r30
 d94:	d1 1d       	adc	r29, r1
 d96:	0f b6       	in	r0, 0x3f	; 63
 d98:	f8 94       	cli
 d9a:	de bf       	out	0x3e, r29	; 62
 d9c:	0f be       	out	0x3f, r0	; 63
 d9e:	cd bf       	out	0x3d, r28	; 61
 da0:	ed 01       	movw	r28, r26
 da2:	08 95       	ret

00000da4 <_exit>:
 da4:	f8 94       	cli

00000da6 <__stop_program>:
 da6:	ff cf       	rjmp	.-2      	; 0xda6 <__stop_program>
