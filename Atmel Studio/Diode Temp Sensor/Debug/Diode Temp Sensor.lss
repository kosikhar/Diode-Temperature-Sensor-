
Diode Temp Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000984  000009f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000984  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ba  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b39  00000000  00000000  00001e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d6  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000579  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a78  00000000  00000000  000038f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
  8e:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADCRead>:
#include "ADC_Read.h"

uint16_t ADCRead(uint8_t pin){
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	a0 97       	sbiw	r28, 0x20	; 32
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61

	struct ADCOut input[16]; //We're going to sample and average from 16 readings. 

	PRR &= 0b11111110; //Enable ADC Power
  b2:	e4 e6       	ldi	r30, 0x64	; 100
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	9e 7f       	andi	r25, 0xFE	; 254
  ba:	90 83       	st	Z, r25
	ADCSRB &= 0x00; //Auto Trigger = Free Running mode
  bc:	eb e7       	ldi	r30, 0x7B	; 123
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | ( 1 << ADPS2); // ADC Enable; Auto Trigger;
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	94 6a       	ori	r25, 0xA4	; 164
  cc:	90 83       	st	Z, r25
	ADMUX |= (1 << REFS0); //Set reference, AVcc	      // Interupt Enable; Freq/16 
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	90 64       	ori	r25, 0x40	; 64
  d6:	90 83       	st	Z, r25
	ADMUX |= pin; //Set ADC pin
  d8:	90 81       	ld	r25, Z
  da:	89 2b       	or	r24, r25
  dc:	80 83       	st	Z, r24
  de:	9e 01       	movw	r18, r28
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	7e 01       	movw	r14, r28
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	e8 0e       	add	r14, r24
  ea:	f1 1c       	adc	r15, r1
  ec:	ae 01       	movw	r20, r28
  ee:	4e 5d       	subi	r20, 0xDE	; 222
  f0:	5f 4f       	sbci	r21, 0xFF	; 255

	uint8_t i;
	for (i = 0x0; i < 16 ; i++){
	
		ADCSRA |= (1 << ADSC); //Start Conversation, 
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0

		while( (ADCSRA & (1 << ADSC)) ); //Wait till conversation complete ( ADSC == 0 )
		
		input[i].lowbyte = 0;
		input[i].highbyte = 0;
		input[i].lowbyte = ADCL;  //Read output
  f6:	08 e7       	ldi	r16, 0x78	; 120
  f8:	10 e0       	ldi	r17, 0x00	; 0
		input[i].highbyte = ADCH; 
  fa:	69 e7       	ldi	r22, 0x79	; 121
  fc:	70 e0       	ldi	r23, 0x00	; 0
	ADMUX |= pin; //Set ADC pin

	uint8_t i;
	for (i = 0x0; i < 16 ; i++){
	
		ADCSRA |= (1 << ADSC); //Start Conversation, 
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24

		while( (ADCSRA & (1 << ADSC)) ); //Wait till conversation complete ( ADSC == 0 )
 104:	80 81       	ld	r24, Z
 106:	86 fd       	sbrc	r24, 6
 108:	fd cf       	rjmp	.-6      	; 0x104 <ADCRead+0x6e>
		
		input[i].lowbyte = 0;
 10a:	d9 01       	movw	r26, r18
 10c:	1c 92       	st	X, r1
		input[i].highbyte = 0;
 10e:	d7 01       	movw	r26, r14
 110:	1c 92       	st	X, r1
		input[i].lowbyte = ADCL;  //Read output
 112:	d8 01       	movw	r26, r16
 114:	8c 91       	ld	r24, X
 116:	d9 01       	movw	r26, r18
 118:	8c 93       	st	X, r24
		input[i].highbyte = ADCH; 
 11a:	db 01       	movw	r26, r22
 11c:	8c 91       	ld	r24, X
 11e:	d7 01       	movw	r26, r14
 120:	8c 93       	st	X, r24
 122:	2e 5f       	subi	r18, 0xFE	; 254
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	eb 0e       	add	r14, r27
 12a:	f1 1c       	adc	r15, r1
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | ( 1 << ADPS2); // ADC Enable; Auto Trigger;
	ADMUX |= (1 << REFS0); //Set reference, AVcc	      // Interupt Enable; Freq/16 
	ADMUX |= pin; //Set ADC pin

	uint8_t i;
	for (i = 0x0; i < 16 ; i++){
 12c:	e4 16       	cp	r14, r20
 12e:	f5 06       	cpc	r15, r21
 130:	31 f7       	brne	.-52     	; 0xfe <ADCRead+0x68>
 132:	fe 01       	movw	r30, r28
 134:	34 96       	adiw	r30, 0x04	; 4
 136:	df 01       	movw	r26, r30
 138:	13 97       	sbiw	r26, 0x03	; 3
 13a:	2c 91       	ld	r18, X
 13c:	11 96       	adiw	r26, 0x01	; 1
 13e:	8c 91       	ld	r24, X
 140:	11 96       	adiw	r26, 0x01	; 1
 142:	9c 91       	ld	r25, X
 144:	60 81       	ld	r22, Z
 146:	32 96       	adiw	r30, 0x02	; 2
		input[i].highbyte = ADCH; 
		
	}

	uint32_t sum = 0x0;
	for (i = 0x0; i < 15; i++)
 148:	e4 17       	cp	r30, r20
 14a:	f5 07       	cpc	r31, r21
 14c:	a1 f7       	brne	.-24     	; 0x136 <ADCRead+0xa0>

uint16_t byteCombine(struct ADCOut input){ //The ADCOut struct holds these 2 8bit numbers
	
	uint32_t output = 0x0;
	
	output = (input.highbyte << 8) | input.lowbyte;
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	38 2b       	or	r19, r24
 152:	89 2f       	mov	r24, r25
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	96 2b       	or	r25, r22
	}

	uint32_t sum = 0x0;
	for (i = 0x0; i < 15; i++)
	{
		sum = byteCombine(input[i]) + byteCombine(input[i+1]);  // add up all the readings
 158:	82 0f       	add	r24, r18
 15a:	93 1f       	adc	r25, r19
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b0 e0       	ldi	r27, 0x00	; 0
	}

	uint16_t average_reading = (uint16_t) (sum / 16);  //Find the average of the readings and return the value
 160:	68 94       	set
 162:	13 f8       	bld	r1, 3
 164:	b6 95       	lsr	r27
 166:	a7 95       	ror	r26
 168:	97 95       	ror	r25
 16a:	87 95       	ror	r24
 16c:	16 94       	lsr	r1
 16e:	d1 f7       	brne	.-12     	; 0x164 <ADCRead+0xce>
	return average_reading;
}
 170:	a0 96       	adiw	r28, 0x20	; 32
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	08 95       	ret

0000018a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 18a:	5e 9a       	sbi	0x0b, 6	; 11
 18c:	00 00       	nop
 18e:	5e 98       	cbi	0x0b, 6	; 11
 190:	08 95       	ret

00000192 <lcd_write>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	d8 2f       	mov	r29, r24
 198:	66 23       	and	r22, r22
 19a:	11 f0       	breq	.+4      	; 0x1a0 <lcd_write+0xe>
 19c:	5c 9a       	sbi	0x0b, 4	; 11
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <lcd_write+0x10>
 1a0:	5c 98       	cbi	0x0b, 4	; 11
 1a2:	5d 98       	cbi	0x0b, 5	; 11
 1a4:	8a b1       	in	r24, 0x0a	; 10
 1a6:	8f 60       	ori	r24, 0x0F	; 15
 1a8:	8a b9       	out	0x0a, r24	; 10
 1aa:	cb b1       	in	r28, 0x0b	; 11
 1ac:	c0 7f       	andi	r28, 0xF0	; 240
 1ae:	8d 2f       	mov	r24, r29
 1b0:	82 95       	swap	r24
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	8c 2b       	or	r24, r28
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
 1bc:	df 70       	andi	r29, 0x0F	; 15
 1be:	dc 2b       	or	r29, r28
 1c0:	db b9       	out	0x0b, r29	; 11
 1c2:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
 1c6:	cf 60       	ori	r28, 0x0F	; 15
 1c8:	cb b9       	out	0x0b, r28	; 11
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <lcd_read>:
 1d0:	88 23       	and	r24, r24
 1d2:	11 f0       	breq	.+4      	; 0x1d8 <lcd_read+0x8>
 1d4:	5c 9a       	sbi	0x0b, 4	; 11
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <lcd_read+0xa>
 1d8:	5c 98       	cbi	0x0b, 4	; 11
 1da:	5d 9a       	sbi	0x0b, 5	; 11
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	8a b9       	out	0x0a, r24	; 10
 1e2:	5e 9a       	sbi	0x0b, 6	; 11
 1e4:	00 00       	nop
 1e6:	29 b1       	in	r18, 0x09	; 9
 1e8:	5e 98       	cbi	0x0b, 6	; 11
 1ea:	00 00       	nop
 1ec:	5e 9a       	sbi	0x0b, 6	; 11
 1ee:	00 00       	nop
 1f0:	99 b1       	in	r25, 0x09	; 9
 1f2:	22 95       	swap	r18
 1f4:	20 7f       	andi	r18, 0xF0	; 240
 1f6:	89 2f       	mov	r24, r25
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	5e 98       	cbi	0x0b, 6	; 11
 1fc:	82 2b       	or	r24, r18
 1fe:	08 95       	ret

00000200 <lcd_waitbusy>:
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_read>
 206:	88 23       	and	r24, r24
 208:	dc f3       	brlt	.-10     	; 0x200 <lcd_waitbusy>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_waitbusy+0xc>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_waitbusy+0xe>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_read>
 214:	08 95       	ret

00000216 <lcd_command>:
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
 21a:	0e 94 00 01 	call	0x200	; 0x200 <lcd_waitbusy>
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_write>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <lcd_gotoxy>:
 22a:	61 11       	cpse	r22, r1
 22c:	04 c0       	rjmp	.+8      	; 0x236 <lcd_gotoxy+0xc>
 22e:	80 58       	subi	r24, 0x80	; 128
 230:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
 234:	08 95       	ret
 236:	80 54       	subi	r24, 0x40	; 64
 238:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
 23c:	08 95       	ret

0000023e <lcd_clrscr>:
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
 244:	08 95       	ret

00000246 <lcd_putc>:
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	0e 94 00 01 	call	0x200	; 0x200 <lcd_waitbusy>
 24e:	ca 30       	cpi	r28, 0x0A	; 10
 250:	49 f4       	brne	.+18     	; 0x264 <lcd_putc+0x1e>
 252:	80 34       	cpi	r24, 0x40	; 64
 254:	10 f0       	brcs	.+4      	; 0x25a <lcd_putc+0x14>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	01 c0       	rjmp	.+2      	; 0x25c <lcd_putc+0x16>
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	80 58       	subi	r24, 0x80	; 128
 25e:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
 262:	04 c0       	rjmp	.+8      	; 0x26c <lcd_putc+0x26>
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	8c 2f       	mov	r24, r28
 268:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_write>
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <lcd_puts>:
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	fc 01       	movw	r30, r24
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	29 f0       	breq	.+10     	; 0x28a <lcd_puts+0x1a>
 280:	0e 94 23 01 	call	0x246	; 0x246 <lcd_putc>
 284:	89 91       	ld	r24, Y+
 286:	81 11       	cpse	r24, r1
 288:	fb cf       	rjmp	.-10     	; 0x280 <lcd_puts+0x10>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 294:	9a b1       	in	r25, 0x0a	; 10
 296:	9f 67       	ori	r25, 0x7F	; 127
 298:	9a b9       	out	0x0a, r25	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0xe>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x14>
 2a4:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 2a6:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 2a8:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 2aa:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
 2ae:	81 ee       	ldi	r24, 0xE1	; 225
 2b0:	94 e0       	ldi	r25, 0x04	; 4
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init+0x22>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x28>
 2b8:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2ba:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
 2be:	95 e1       	ldi	r25, 0x15	; 21
 2c0:	9a 95       	dec	r25
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_init+0x30>
 2c4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2c6:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
 2ca:	85 e1       	ldi	r24, 0x15	; 21
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_init+0x3c>
 2d0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2d2:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 2d4:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
 2d8:	95 e1       	ldi	r25, 0x15	; 21
 2da:	9a 95       	dec	r25
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x4a>
 2de:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2e6:	88 e0       	ldi	r24, 0x08	; 8
 2e8:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2ec:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2f6:	8c 2f       	mov	r24, r28
 2f8:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_command>

}/* lcd_init */
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <lcd_write>:
  lcd_write takes in 4 values.  
  
 ***************************************
 */

 void lcd_write( uint16_t adc_reading_lm35, uint16_t adc_reading_diode, uint8_t temperture_lm35, uint8_t temperture_diode ){  //Not Tested
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	a0 97       	sbiw	r28, 0x20	; 32
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	f8 2e       	mov	r15, r24
 322:	e9 2e       	mov	r14, r25
 324:	16 2f       	mov	r17, r22
 326:	07 2f       	mov	r16, r23
 328:	c4 2e       	mov	r12, r20
 32a:	d2 2e       	mov	r13, r18

	lcd_init( LCD_DISP_ON_CURSOR );   //Turn the LCD on, with cursor.
 32c:	8e e0       	ldi	r24, 0x0E	; 14
 32e:	0e 94 48 01 	call	0x290	; 0x290 <lcd_init>
	
	lcd_clrscr(); //Clear screen then send cursor to "home" (0,0)
 332:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_clrscr>
	if ( (display_line1 == NULL) || (display_line2 == NULL) ){
		char * error = "error"; 
		lcd_puts(error);
	}
	
	sprintf(display_line1, "LM35 :%4.0d - %2.0dC", (int) adc_reading_lm35, (int) temperture_lm35);     //First line on the LCD
 336:	1f 92       	push	r1
 338:	cf 92       	push	r12
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	9f 93       	push	r25
 344:	8f 93       	push	r24
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	7c 01       	movw	r14, r24
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <sprintf>
	sprintf(display_line2, "DIODE:%4.0d - %2.0dC", (int) adc_reading_diode, (int) temperture_diode);   //Second line on the LCD
 354:	1f 92       	push	r1
 356:	df 92       	push	r13
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	85 e1       	ldi	r24, 0x15	; 21
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	9f 93       	push	r25
 362:	8f 93       	push	r24
 364:	8e 01       	movw	r16, r28
 366:	0f 5e       	subi	r16, 0xEF	; 239
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	1f 93       	push	r17
 36c:	0f 93       	push	r16
 36e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <sprintf>

	lcd_puts( display_line1 );               //display line 1
 372:	c7 01       	movw	r24, r14
 374:	0e 94 38 01 	call	0x270	; 0x270 <lcd_puts>
	lcd_gotoxy((uint8_t) 0x0, (uint8_t) 0x1);    //Move cursor to the second line
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_gotoxy>
	lcd_puts( display_line2 );                //display line 2
 380:	c8 01       	movw	r24, r16
 382:	0e 94 38 01 	call	0x270	; 0x270 <lcd_puts>
	
	lcd_init( LCD_DISP_ON );        //LCD already is on, but this gets rid of the cursor (*I think). 
 386:	8c e0       	ldi	r24, 0x0C	; 12
 388:	0e 94 48 01 	call	0x290	; 0x290 <lcd_init>
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61

 }
 396:	a0 96       	adiw	r28, 0x20	; 32
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	08 95       	ret

000003b4 <main>:
	uint16_t adc_reading_lm35 = 0x0;
	uint16_t adc_reading_diode = 0x0;
	uint8_t temperture_lm35 = 0x0;
	uint8_t temperture_diode = 0x0;

	adc_reading_lm35 = ADCRead(0x0);  //Reads ADC, the input is the number number of the ADC
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 4b 00 	call	0x96	; 0x96 <ADCRead>
 3ba:	ec 01       	movw	r28, r24
	adc_reading_diode = ADCRead(0x1);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 4b 00 	call	0x96	; 0x96 <ADCRead>

	lcd_write(adc_reading_lm35, adc_reading_diode, temperture_lm35, temperture_diode);
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	bc 01       	movw	r22, r24
 3c8:	ce 01       	movw	r24, r28
 3ca:	0e 94 80 01 	call	0x300	; 0x300 <lcd_write>
	
	
	while(1){};
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <main+0x1a>

000003d0 <sprintf>:
 3d0:	ae e0       	ldi	r26, 0x0E	; 14
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	ee ee       	ldi	r30, 0xEE	; 238
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	0c 94 97 04 	jmp	0x92e	; 0x92e <__prologue_saves__+0x1c>
 3dc:	0d 89       	ldd	r16, Y+21	; 0x15
 3de:	1e 89       	ldd	r17, Y+22	; 0x16
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	8c 83       	std	Y+4, r24	; 0x04
 3e4:	1a 83       	std	Y+2, r17	; 0x02
 3e6:	09 83       	std	Y+1, r16	; 0x01
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	9f e7       	ldi	r25, 0x7F	; 127
 3ec:	9e 83       	std	Y+6, r25	; 0x06
 3ee:	8d 83       	std	Y+5, r24	; 0x05
 3f0:	ae 01       	movw	r20, r28
 3f2:	47 5e       	subi	r20, 0xE7	; 231
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	6f 89       	ldd	r22, Y+23	; 0x17
 3f8:	78 8d       	ldd	r23, Y+24	; 0x18
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	0e 94 0b 02 	call	0x416	; 0x416 <vfprintf>
 402:	2f 81       	ldd	r18, Y+7	; 0x07
 404:	38 85       	ldd	r19, Y+8	; 0x08
 406:	f8 01       	movw	r30, r16
 408:	e2 0f       	add	r30, r18
 40a:	f3 1f       	adc	r31, r19
 40c:	10 82       	st	Z, r1
 40e:	2e 96       	adiw	r28, 0x0e	; 14
 410:	e4 e0       	ldi	r30, 0x04	; 4
 412:	0c 94 b3 04 	jmp	0x966	; 0x966 <__epilogue_restores__+0x1c>

00000416 <vfprintf>:
 416:	ac e0       	ldi	r26, 0x0C	; 12
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e1 e1       	ldi	r30, 0x11	; 17
 41c:	f2 e0       	ldi	r31, 0x02	; 2
 41e:	0c 94 89 04 	jmp	0x912	; 0x912 <__prologue_saves__>
 422:	7c 01       	movw	r14, r24
 424:	6b 01       	movw	r12, r22
 426:	8a 01       	movw	r16, r20
 428:	fc 01       	movw	r30, r24
 42a:	17 82       	std	Z+7, r1	; 0x07
 42c:	16 82       	std	Z+6, r1	; 0x06
 42e:	83 81       	ldd	r24, Z+3	; 0x03
 430:	81 ff       	sbrs	r24, 1
 432:	bd c1       	rjmp	.+890    	; 0x7ae <vfprintf+0x398>
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	4c 01       	movw	r8, r24
 43a:	f7 01       	movw	r30, r14
 43c:	93 81       	ldd	r25, Z+3	; 0x03
 43e:	f6 01       	movw	r30, r12
 440:	93 fd       	sbrc	r25, 3
 442:	85 91       	lpm	r24, Z+
 444:	93 ff       	sbrs	r25, 3
 446:	81 91       	ld	r24, Z+
 448:	6f 01       	movw	r12, r30
 44a:	88 23       	and	r24, r24
 44c:	09 f4       	brne	.+2      	; 0x450 <vfprintf+0x3a>
 44e:	ab c1       	rjmp	.+854    	; 0x7a6 <vfprintf+0x390>
 450:	85 32       	cpi	r24, 0x25	; 37
 452:	39 f4       	brne	.+14     	; 0x462 <vfprintf+0x4c>
 454:	93 fd       	sbrc	r25, 3
 456:	85 91       	lpm	r24, Z+
 458:	93 ff       	sbrs	r25, 3
 45a:	81 91       	ld	r24, Z+
 45c:	6f 01       	movw	r12, r30
 45e:	85 32       	cpi	r24, 0x25	; 37
 460:	29 f4       	brne	.+10     	; 0x46c <vfprintf+0x56>
 462:	b7 01       	movw	r22, r14
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 46a:	e7 cf       	rjmp	.-50     	; 0x43a <vfprintf+0x24>
 46c:	51 2c       	mov	r5, r1
 46e:	31 2c       	mov	r3, r1
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	20 32       	cpi	r18, 0x20	; 32
 474:	a0 f4       	brcc	.+40     	; 0x49e <vfprintf+0x88>
 476:	8b 32       	cpi	r24, 0x2B	; 43
 478:	69 f0       	breq	.+26     	; 0x494 <vfprintf+0x7e>
 47a:	30 f4       	brcc	.+12     	; 0x488 <vfprintf+0x72>
 47c:	80 32       	cpi	r24, 0x20	; 32
 47e:	59 f0       	breq	.+22     	; 0x496 <vfprintf+0x80>
 480:	83 32       	cpi	r24, 0x23	; 35
 482:	69 f4       	brne	.+26     	; 0x49e <vfprintf+0x88>
 484:	20 61       	ori	r18, 0x10	; 16
 486:	2c c0       	rjmp	.+88     	; 0x4e0 <vfprintf+0xca>
 488:	8d 32       	cpi	r24, 0x2D	; 45
 48a:	39 f0       	breq	.+14     	; 0x49a <vfprintf+0x84>
 48c:	80 33       	cpi	r24, 0x30	; 48
 48e:	39 f4       	brne	.+14     	; 0x49e <vfprintf+0x88>
 490:	21 60       	ori	r18, 0x01	; 1
 492:	26 c0       	rjmp	.+76     	; 0x4e0 <vfprintf+0xca>
 494:	22 60       	ori	r18, 0x02	; 2
 496:	24 60       	ori	r18, 0x04	; 4
 498:	23 c0       	rjmp	.+70     	; 0x4e0 <vfprintf+0xca>
 49a:	28 60       	ori	r18, 0x08	; 8
 49c:	21 c0       	rjmp	.+66     	; 0x4e0 <vfprintf+0xca>
 49e:	27 fd       	sbrc	r18, 7
 4a0:	27 c0       	rjmp	.+78     	; 0x4f0 <vfprintf+0xda>
 4a2:	30 ed       	ldi	r19, 0xD0	; 208
 4a4:	38 0f       	add	r19, r24
 4a6:	3a 30       	cpi	r19, 0x0A	; 10
 4a8:	78 f4       	brcc	.+30     	; 0x4c8 <vfprintf+0xb2>
 4aa:	26 ff       	sbrs	r18, 6
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <vfprintf+0xa4>
 4ae:	fa e0       	ldi	r31, 0x0A	; 10
 4b0:	5f 9e       	mul	r5, r31
 4b2:	30 0d       	add	r19, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	53 2e       	mov	r5, r19
 4b8:	13 c0       	rjmp	.+38     	; 0x4e0 <vfprintf+0xca>
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	38 9e       	mul	r3, r24
 4be:	30 0d       	add	r19, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	33 2e       	mov	r3, r19
 4c4:	20 62       	ori	r18, 0x20	; 32
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <vfprintf+0xca>
 4c8:	8e 32       	cpi	r24, 0x2E	; 46
 4ca:	21 f4       	brne	.+8      	; 0x4d4 <vfprintf+0xbe>
 4cc:	26 fd       	sbrc	r18, 6
 4ce:	6b c1       	rjmp	.+726    	; 0x7a6 <vfprintf+0x390>
 4d0:	20 64       	ori	r18, 0x40	; 64
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <vfprintf+0xca>
 4d4:	8c 36       	cpi	r24, 0x6C	; 108
 4d6:	11 f4       	brne	.+4      	; 0x4dc <vfprintf+0xc6>
 4d8:	20 68       	ori	r18, 0x80	; 128
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <vfprintf+0xca>
 4dc:	88 36       	cpi	r24, 0x68	; 104
 4de:	41 f4       	brne	.+16     	; 0x4f0 <vfprintf+0xda>
 4e0:	f6 01       	movw	r30, r12
 4e2:	93 fd       	sbrc	r25, 3
 4e4:	85 91       	lpm	r24, Z+
 4e6:	93 ff       	sbrs	r25, 3
 4e8:	81 91       	ld	r24, Z+
 4ea:	6f 01       	movw	r12, r30
 4ec:	81 11       	cpse	r24, r1
 4ee:	c1 cf       	rjmp	.-126    	; 0x472 <vfprintf+0x5c>
 4f0:	98 2f       	mov	r25, r24
 4f2:	9f 7d       	andi	r25, 0xDF	; 223
 4f4:	95 54       	subi	r25, 0x45	; 69
 4f6:	93 30       	cpi	r25, 0x03	; 3
 4f8:	28 f4       	brcc	.+10     	; 0x504 <vfprintf+0xee>
 4fa:	0c 5f       	subi	r16, 0xFC	; 252
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	ff e3       	ldi	r31, 0x3F	; 63
 500:	f9 83       	std	Y+1, r31	; 0x01
 502:	0d c0       	rjmp	.+26     	; 0x51e <vfprintf+0x108>
 504:	83 36       	cpi	r24, 0x63	; 99
 506:	31 f0       	breq	.+12     	; 0x514 <vfprintf+0xfe>
 508:	83 37       	cpi	r24, 0x73	; 115
 50a:	71 f0       	breq	.+28     	; 0x528 <vfprintf+0x112>
 50c:	83 35       	cpi	r24, 0x53	; 83
 50e:	09 f0       	breq	.+2      	; 0x512 <vfprintf+0xfc>
 510:	5b c0       	rjmp	.+182    	; 0x5c8 <vfprintf+0x1b2>
 512:	22 c0       	rjmp	.+68     	; 0x558 <vfprintf+0x142>
 514:	f8 01       	movw	r30, r16
 516:	80 81       	ld	r24, Z
 518:	89 83       	std	Y+1, r24	; 0x01
 51a:	0e 5f       	subi	r16, 0xFE	; 254
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	44 24       	eor	r4, r4
 520:	43 94       	inc	r4
 522:	51 2c       	mov	r5, r1
 524:	54 01       	movw	r10, r8
 526:	15 c0       	rjmp	.+42     	; 0x552 <vfprintf+0x13c>
 528:	38 01       	movw	r6, r16
 52a:	f2 e0       	ldi	r31, 0x02	; 2
 52c:	6f 0e       	add	r6, r31
 52e:	71 1c       	adc	r7, r1
 530:	f8 01       	movw	r30, r16
 532:	a0 80       	ld	r10, Z
 534:	b1 80       	ldd	r11, Z+1	; 0x01
 536:	26 ff       	sbrs	r18, 6
 538:	03 c0       	rjmp	.+6      	; 0x540 <vfprintf+0x12a>
 53a:	65 2d       	mov	r22, r5
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <vfprintf+0x12e>
 540:	6f ef       	ldi	r22, 0xFF	; 255
 542:	7f ef       	ldi	r23, 0xFF	; 255
 544:	c5 01       	movw	r24, r10
 546:	2c 87       	std	Y+12, r18	; 0x0c
 548:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <strnlen>
 54c:	2c 01       	movw	r4, r24
 54e:	83 01       	movw	r16, r6
 550:	2c 85       	ldd	r18, Y+12	; 0x0c
 552:	2f 77       	andi	r18, 0x7F	; 127
 554:	22 2e       	mov	r2, r18
 556:	17 c0       	rjmp	.+46     	; 0x586 <vfprintf+0x170>
 558:	38 01       	movw	r6, r16
 55a:	f2 e0       	ldi	r31, 0x02	; 2
 55c:	6f 0e       	add	r6, r31
 55e:	71 1c       	adc	r7, r1
 560:	f8 01       	movw	r30, r16
 562:	a0 80       	ld	r10, Z
 564:	b1 80       	ldd	r11, Z+1	; 0x01
 566:	26 ff       	sbrs	r18, 6
 568:	03 c0       	rjmp	.+6      	; 0x570 <vfprintf+0x15a>
 56a:	65 2d       	mov	r22, r5
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <vfprintf+0x15e>
 570:	6f ef       	ldi	r22, 0xFF	; 255
 572:	7f ef       	ldi	r23, 0xFF	; 255
 574:	c5 01       	movw	r24, r10
 576:	2c 87       	std	Y+12, r18	; 0x0c
 578:	0e 94 dd 03 	call	0x7ba	; 0x7ba <strnlen_P>
 57c:	2c 01       	movw	r4, r24
 57e:	2c 85       	ldd	r18, Y+12	; 0x0c
 580:	20 68       	ori	r18, 0x80	; 128
 582:	22 2e       	mov	r2, r18
 584:	83 01       	movw	r16, r6
 586:	23 fc       	sbrc	r2, 3
 588:	1b c0       	rjmp	.+54     	; 0x5c0 <vfprintf+0x1aa>
 58a:	83 2d       	mov	r24, r3
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	48 16       	cp	r4, r24
 590:	59 06       	cpc	r5, r25
 592:	b0 f4       	brcc	.+44     	; 0x5c0 <vfprintf+0x1aa>
 594:	b7 01       	movw	r22, r14
 596:	80 e2       	ldi	r24, 0x20	; 32
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 59e:	3a 94       	dec	r3
 5a0:	f4 cf       	rjmp	.-24     	; 0x58a <vfprintf+0x174>
 5a2:	f5 01       	movw	r30, r10
 5a4:	27 fc       	sbrc	r2, 7
 5a6:	85 91       	lpm	r24, Z+
 5a8:	27 fe       	sbrs	r2, 7
 5aa:	81 91       	ld	r24, Z+
 5ac:	5f 01       	movw	r10, r30
 5ae:	b7 01       	movw	r22, r14
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 5b6:	31 10       	cpse	r3, r1
 5b8:	3a 94       	dec	r3
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	4f 1a       	sub	r4, r31
 5be:	51 08       	sbc	r5, r1
 5c0:	41 14       	cp	r4, r1
 5c2:	51 04       	cpc	r5, r1
 5c4:	71 f7       	brne	.-36     	; 0x5a2 <vfprintf+0x18c>
 5c6:	e5 c0       	rjmp	.+458    	; 0x792 <vfprintf+0x37c>
 5c8:	84 36       	cpi	r24, 0x64	; 100
 5ca:	11 f0       	breq	.+4      	; 0x5d0 <vfprintf+0x1ba>
 5cc:	89 36       	cpi	r24, 0x69	; 105
 5ce:	39 f5       	brne	.+78     	; 0x61e <vfprintf+0x208>
 5d0:	f8 01       	movw	r30, r16
 5d2:	27 ff       	sbrs	r18, 7
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <vfprintf+0x1ce>
 5d6:	60 81       	ld	r22, Z
 5d8:	71 81       	ldd	r23, Z+1	; 0x01
 5da:	82 81       	ldd	r24, Z+2	; 0x02
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	0c 5f       	subi	r16, 0xFC	; 252
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <vfprintf+0x1de>
 5e4:	60 81       	ld	r22, Z
 5e6:	71 81       	ldd	r23, Z+1	; 0x01
 5e8:	07 2e       	mov	r0, r23
 5ea:	00 0c       	add	r0, r0
 5ec:	88 0b       	sbc	r24, r24
 5ee:	99 0b       	sbc	r25, r25
 5f0:	0e 5f       	subi	r16, 0xFE	; 254
 5f2:	1f 4f       	sbci	r17, 0xFF	; 255
 5f4:	2f 76       	andi	r18, 0x6F	; 111
 5f6:	72 2e       	mov	r7, r18
 5f8:	97 ff       	sbrs	r25, 7
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <vfprintf+0x1f8>
 5fc:	90 95       	com	r25
 5fe:	80 95       	com	r24
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	20 68       	ori	r18, 0x80	; 128
 60c:	72 2e       	mov	r7, r18
 60e:	2a e0       	ldi	r18, 0x0A	; 10
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	a4 01       	movw	r20, r8
 614:	0e 94 2b 04 	call	0x856	; 0x856 <__ultoa_invert>
 618:	a8 2e       	mov	r10, r24
 61a:	a8 18       	sub	r10, r8
 61c:	44 c0       	rjmp	.+136    	; 0x6a6 <vfprintf+0x290>
 61e:	85 37       	cpi	r24, 0x75	; 117
 620:	29 f4       	brne	.+10     	; 0x62c <vfprintf+0x216>
 622:	2f 7e       	andi	r18, 0xEF	; 239
 624:	b2 2e       	mov	r11, r18
 626:	2a e0       	ldi	r18, 0x0A	; 10
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	25 c0       	rjmp	.+74     	; 0x676 <vfprintf+0x260>
 62c:	f2 2f       	mov	r31, r18
 62e:	f9 7f       	andi	r31, 0xF9	; 249
 630:	bf 2e       	mov	r11, r31
 632:	8f 36       	cpi	r24, 0x6F	; 111
 634:	c1 f0       	breq	.+48     	; 0x666 <vfprintf+0x250>
 636:	18 f4       	brcc	.+6      	; 0x63e <vfprintf+0x228>
 638:	88 35       	cpi	r24, 0x58	; 88
 63a:	79 f0       	breq	.+30     	; 0x65a <vfprintf+0x244>
 63c:	b4 c0       	rjmp	.+360    	; 0x7a6 <vfprintf+0x390>
 63e:	80 37       	cpi	r24, 0x70	; 112
 640:	19 f0       	breq	.+6      	; 0x648 <vfprintf+0x232>
 642:	88 37       	cpi	r24, 0x78	; 120
 644:	21 f0       	breq	.+8      	; 0x64e <vfprintf+0x238>
 646:	af c0       	rjmp	.+350    	; 0x7a6 <vfprintf+0x390>
 648:	2f 2f       	mov	r18, r31
 64a:	20 61       	ori	r18, 0x10	; 16
 64c:	b2 2e       	mov	r11, r18
 64e:	b4 fe       	sbrs	r11, 4
 650:	0d c0       	rjmp	.+26     	; 0x66c <vfprintf+0x256>
 652:	8b 2d       	mov	r24, r11
 654:	84 60       	ori	r24, 0x04	; 4
 656:	b8 2e       	mov	r11, r24
 658:	09 c0       	rjmp	.+18     	; 0x66c <vfprintf+0x256>
 65a:	24 ff       	sbrs	r18, 4
 65c:	0a c0       	rjmp	.+20     	; 0x672 <vfprintf+0x25c>
 65e:	9f 2f       	mov	r25, r31
 660:	96 60       	ori	r25, 0x06	; 6
 662:	b9 2e       	mov	r11, r25
 664:	06 c0       	rjmp	.+12     	; 0x672 <vfprintf+0x25c>
 666:	28 e0       	ldi	r18, 0x08	; 8
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	05 c0       	rjmp	.+10     	; 0x676 <vfprintf+0x260>
 66c:	20 e1       	ldi	r18, 0x10	; 16
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0x260>
 672:	20 e1       	ldi	r18, 0x10	; 16
 674:	32 e0       	ldi	r19, 0x02	; 2
 676:	f8 01       	movw	r30, r16
 678:	b7 fe       	sbrs	r11, 7
 67a:	07 c0       	rjmp	.+14     	; 0x68a <vfprintf+0x274>
 67c:	60 81       	ld	r22, Z
 67e:	71 81       	ldd	r23, Z+1	; 0x01
 680:	82 81       	ldd	r24, Z+2	; 0x02
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	0c 5f       	subi	r16, 0xFC	; 252
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	06 c0       	rjmp	.+12     	; 0x696 <vfprintf+0x280>
 68a:	60 81       	ld	r22, Z
 68c:	71 81       	ldd	r23, Z+1	; 0x01
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 5f       	subi	r16, 0xFE	; 254
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	a4 01       	movw	r20, r8
 698:	0e 94 2b 04 	call	0x856	; 0x856 <__ultoa_invert>
 69c:	a8 2e       	mov	r10, r24
 69e:	a8 18       	sub	r10, r8
 6a0:	fb 2d       	mov	r31, r11
 6a2:	ff 77       	andi	r31, 0x7F	; 127
 6a4:	7f 2e       	mov	r7, r31
 6a6:	76 fe       	sbrs	r7, 6
 6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <vfprintf+0x2aa>
 6aa:	37 2d       	mov	r19, r7
 6ac:	3e 7f       	andi	r19, 0xFE	; 254
 6ae:	a5 14       	cp	r10, r5
 6b0:	50 f4       	brcc	.+20     	; 0x6c6 <vfprintf+0x2b0>
 6b2:	74 fe       	sbrs	r7, 4
 6b4:	0a c0       	rjmp	.+20     	; 0x6ca <vfprintf+0x2b4>
 6b6:	72 fc       	sbrc	r7, 2
 6b8:	08 c0       	rjmp	.+16     	; 0x6ca <vfprintf+0x2b4>
 6ba:	37 2d       	mov	r19, r7
 6bc:	3e 7e       	andi	r19, 0xEE	; 238
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <vfprintf+0x2b4>
 6c0:	ba 2c       	mov	r11, r10
 6c2:	37 2d       	mov	r19, r7
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <vfprintf+0x2b6>
 6c6:	ba 2c       	mov	r11, r10
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <vfprintf+0x2b6>
 6ca:	b5 2c       	mov	r11, r5
 6cc:	34 ff       	sbrs	r19, 4
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <vfprintf+0x2d4>
 6d0:	fe 01       	movw	r30, r28
 6d2:	ea 0d       	add	r30, r10
 6d4:	f1 1d       	adc	r31, r1
 6d6:	80 81       	ld	r24, Z
 6d8:	80 33       	cpi	r24, 0x30	; 48
 6da:	11 f4       	brne	.+4      	; 0x6e0 <vfprintf+0x2ca>
 6dc:	39 7e       	andi	r19, 0xE9	; 233
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <vfprintf+0x2dc>
 6e0:	32 ff       	sbrs	r19, 2
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0x2da>
 6e4:	b3 94       	inc	r11
 6e6:	b3 94       	inc	r11
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <vfprintf+0x2dc>
 6ea:	83 2f       	mov	r24, r19
 6ec:	86 78       	andi	r24, 0x86	; 134
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <vfprintf+0x2dc>
 6f0:	b3 94       	inc	r11
 6f2:	33 fd       	sbrc	r19, 3
 6f4:	13 c0       	rjmp	.+38     	; 0x71c <vfprintf+0x306>
 6f6:	30 ff       	sbrs	r19, 0
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <vfprintf+0x2f0>
 6fa:	5a 2c       	mov	r5, r10
 6fc:	b3 14       	cp	r11, r3
 6fe:	18 f4       	brcc	.+6      	; 0x706 <vfprintf+0x2f0>
 700:	53 0c       	add	r5, r3
 702:	5b 18       	sub	r5, r11
 704:	b3 2c       	mov	r11, r3
 706:	b3 14       	cp	r11, r3
 708:	68 f4       	brcc	.+26     	; 0x724 <vfprintf+0x30e>
 70a:	b7 01       	movw	r22, r14
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	3c 87       	std	Y+12, r19	; 0x0c
 712:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 716:	b3 94       	inc	r11
 718:	3c 85       	ldd	r19, Y+12	; 0x0c
 71a:	f5 cf       	rjmp	.-22     	; 0x706 <vfprintf+0x2f0>
 71c:	b3 14       	cp	r11, r3
 71e:	10 f4       	brcc	.+4      	; 0x724 <vfprintf+0x30e>
 720:	3b 18       	sub	r3, r11
 722:	01 c0       	rjmp	.+2      	; 0x726 <vfprintf+0x310>
 724:	31 2c       	mov	r3, r1
 726:	34 ff       	sbrs	r19, 4
 728:	12 c0       	rjmp	.+36     	; 0x74e <vfprintf+0x338>
 72a:	b7 01       	movw	r22, r14
 72c:	80 e3       	ldi	r24, 0x30	; 48
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	3c 87       	std	Y+12, r19	; 0x0c
 732:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 736:	3c 85       	ldd	r19, Y+12	; 0x0c
 738:	32 ff       	sbrs	r19, 2
 73a:	17 c0       	rjmp	.+46     	; 0x76a <vfprintf+0x354>
 73c:	31 fd       	sbrc	r19, 1
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x330>
 740:	88 e7       	ldi	r24, 0x78	; 120
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x334>
 746:	88 e5       	ldi	r24, 0x58	; 88
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	b7 01       	movw	r22, r14
 74c:	0c c0       	rjmp	.+24     	; 0x766 <vfprintf+0x350>
 74e:	83 2f       	mov	r24, r19
 750:	86 78       	andi	r24, 0x86	; 134
 752:	59 f0       	breq	.+22     	; 0x76a <vfprintf+0x354>
 754:	31 ff       	sbrs	r19, 1
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfprintf+0x346>
 758:	8b e2       	ldi	r24, 0x2B	; 43
 75a:	01 c0       	rjmp	.+2      	; 0x75e <vfprintf+0x348>
 75c:	80 e2       	ldi	r24, 0x20	; 32
 75e:	37 fd       	sbrc	r19, 7
 760:	8d e2       	ldi	r24, 0x2D	; 45
 762:	b7 01       	movw	r22, r14
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 76a:	a5 14       	cp	r10, r5
 76c:	38 f4       	brcc	.+14     	; 0x77c <vfprintf+0x366>
 76e:	b7 01       	movw	r22, r14
 770:	80 e3       	ldi	r24, 0x30	; 48
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 778:	5a 94       	dec	r5
 77a:	f7 cf       	rjmp	.-18     	; 0x76a <vfprintf+0x354>
 77c:	aa 94       	dec	r10
 77e:	f4 01       	movw	r30, r8
 780:	ea 0d       	add	r30, r10
 782:	f1 1d       	adc	r31, r1
 784:	80 81       	ld	r24, Z
 786:	b7 01       	movw	r22, r14
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 78e:	a1 10       	cpse	r10, r1
 790:	f5 cf       	rjmp	.-22     	; 0x77c <vfprintf+0x366>
 792:	33 20       	and	r3, r3
 794:	09 f4       	brne	.+2      	; 0x798 <vfprintf+0x382>
 796:	51 ce       	rjmp	.-862    	; 0x43a <vfprintf+0x24>
 798:	b7 01       	movw	r22, r14
 79a:	80 e2       	ldi	r24, 0x20	; 32
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <fputc>
 7a2:	3a 94       	dec	r3
 7a4:	f6 cf       	rjmp	.-20     	; 0x792 <vfprintf+0x37c>
 7a6:	f7 01       	movw	r30, r14
 7a8:	86 81       	ldd	r24, Z+6	; 0x06
 7aa:	97 81       	ldd	r25, Z+7	; 0x07
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <vfprintf+0x39c>
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	9f ef       	ldi	r25, 0xFF	; 255
 7b2:	2c 96       	adiw	r28, 0x0c	; 12
 7b4:	e2 e1       	ldi	r30, 0x12	; 18
 7b6:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__epilogue_restores__>

000007ba <strnlen_P>:
 7ba:	fc 01       	movw	r30, r24
 7bc:	05 90       	lpm	r0, Z+
 7be:	61 50       	subi	r22, 0x01	; 1
 7c0:	70 40       	sbci	r23, 0x00	; 0
 7c2:	01 10       	cpse	r0, r1
 7c4:	d8 f7       	brcc	.-10     	; 0x7bc <strnlen_P+0x2>
 7c6:	80 95       	com	r24
 7c8:	90 95       	com	r25
 7ca:	8e 0f       	add	r24, r30
 7cc:	9f 1f       	adc	r25, r31
 7ce:	08 95       	ret

000007d0 <strnlen>:
 7d0:	fc 01       	movw	r30, r24
 7d2:	61 50       	subi	r22, 0x01	; 1
 7d4:	70 40       	sbci	r23, 0x00	; 0
 7d6:	01 90       	ld	r0, Z+
 7d8:	01 10       	cpse	r0, r1
 7da:	d8 f7       	brcc	.-10     	; 0x7d2 <strnlen+0x2>
 7dc:	80 95       	com	r24
 7de:	90 95       	com	r25
 7e0:	8e 0f       	add	r24, r30
 7e2:	9f 1f       	adc	r25, r31
 7e4:	08 95       	ret

000007e6 <fputc>:
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	fb 01       	movw	r30, r22
 7f0:	23 81       	ldd	r18, Z+3	; 0x03
 7f2:	21 fd       	sbrc	r18, 1
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <fputc+0x16>
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	9f ef       	ldi	r25, 0xFF	; 255
 7fa:	28 c0       	rjmp	.+80     	; 0x84c <fputc+0x66>
 7fc:	22 ff       	sbrs	r18, 2
 7fe:	16 c0       	rjmp	.+44     	; 0x82c <fputc+0x46>
 800:	46 81       	ldd	r20, Z+6	; 0x06
 802:	57 81       	ldd	r21, Z+7	; 0x07
 804:	24 81       	ldd	r18, Z+4	; 0x04
 806:	35 81       	ldd	r19, Z+5	; 0x05
 808:	42 17       	cp	r20, r18
 80a:	53 07       	cpc	r21, r19
 80c:	44 f4       	brge	.+16     	; 0x81e <fputc+0x38>
 80e:	a0 81       	ld	r26, Z
 810:	b1 81       	ldd	r27, Z+1	; 0x01
 812:	9d 01       	movw	r18, r26
 814:	2f 5f       	subi	r18, 0xFF	; 255
 816:	3f 4f       	sbci	r19, 0xFF	; 255
 818:	31 83       	std	Z+1, r19	; 0x01
 81a:	20 83       	st	Z, r18
 81c:	8c 93       	st	X, r24
 81e:	26 81       	ldd	r18, Z+6	; 0x06
 820:	37 81       	ldd	r19, Z+7	; 0x07
 822:	2f 5f       	subi	r18, 0xFF	; 255
 824:	3f 4f       	sbci	r19, 0xFF	; 255
 826:	37 83       	std	Z+7, r19	; 0x07
 828:	26 83       	std	Z+6, r18	; 0x06
 82a:	10 c0       	rjmp	.+32     	; 0x84c <fputc+0x66>
 82c:	eb 01       	movw	r28, r22
 82e:	09 2f       	mov	r16, r25
 830:	18 2f       	mov	r17, r24
 832:	00 84       	ldd	r0, Z+8	; 0x08
 834:	f1 85       	ldd	r31, Z+9	; 0x09
 836:	e0 2d       	mov	r30, r0
 838:	09 95       	icall
 83a:	89 2b       	or	r24, r25
 83c:	e1 f6       	brne	.-72     	; 0x7f6 <fputc+0x10>
 83e:	8e 81       	ldd	r24, Y+6	; 0x06
 840:	9f 81       	ldd	r25, Y+7	; 0x07
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	9f 83       	std	Y+7, r25	; 0x07
 846:	8e 83       	std	Y+6, r24	; 0x06
 848:	81 2f       	mov	r24, r17
 84a:	90 2f       	mov	r25, r16
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
 854:	08 95       	ret

00000856 <__ultoa_invert>:
 856:	fa 01       	movw	r30, r20
 858:	aa 27       	eor	r26, r26
 85a:	28 30       	cpi	r18, 0x08	; 8
 85c:	51 f1       	breq	.+84     	; 0x8b2 <__ultoa_invert+0x5c>
 85e:	20 31       	cpi	r18, 0x10	; 16
 860:	81 f1       	breq	.+96     	; 0x8c2 <__ultoa_invert+0x6c>
 862:	e8 94       	clt
 864:	6f 93       	push	r22
 866:	6e 7f       	andi	r22, 0xFE	; 254
 868:	6e 5f       	subi	r22, 0xFE	; 254
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	af 4f       	sbci	r26, 0xFF	; 255
 872:	b1 e0       	ldi	r27, 0x01	; 1
 874:	3e d0       	rcall	.+124    	; 0x8f2 <__ultoa_invert+0x9c>
 876:	b4 e0       	ldi	r27, 0x04	; 4
 878:	3c d0       	rcall	.+120    	; 0x8f2 <__ultoa_invert+0x9c>
 87a:	67 0f       	add	r22, r23
 87c:	78 1f       	adc	r23, r24
 87e:	89 1f       	adc	r24, r25
 880:	9a 1f       	adc	r25, r26
 882:	a1 1d       	adc	r26, r1
 884:	68 0f       	add	r22, r24
 886:	79 1f       	adc	r23, r25
 888:	8a 1f       	adc	r24, r26
 88a:	91 1d       	adc	r25, r1
 88c:	a1 1d       	adc	r26, r1
 88e:	6a 0f       	add	r22, r26
 890:	71 1d       	adc	r23, r1
 892:	81 1d       	adc	r24, r1
 894:	91 1d       	adc	r25, r1
 896:	a1 1d       	adc	r26, r1
 898:	20 d0       	rcall	.+64     	; 0x8da <__ultoa_invert+0x84>
 89a:	09 f4       	brne	.+2      	; 0x89e <__ultoa_invert+0x48>
 89c:	68 94       	set
 89e:	3f 91       	pop	r19
 8a0:	2a e0       	ldi	r18, 0x0A	; 10
 8a2:	26 9f       	mul	r18, r22
 8a4:	11 24       	eor	r1, r1
 8a6:	30 19       	sub	r19, r0
 8a8:	30 5d       	subi	r19, 0xD0	; 208
 8aa:	31 93       	st	Z+, r19
 8ac:	de f6       	brtc	.-74     	; 0x864 <__ultoa_invert+0xe>
 8ae:	cf 01       	movw	r24, r30
 8b0:	08 95       	ret
 8b2:	46 2f       	mov	r20, r22
 8b4:	47 70       	andi	r20, 0x07	; 7
 8b6:	40 5d       	subi	r20, 0xD0	; 208
 8b8:	41 93       	st	Z+, r20
 8ba:	b3 e0       	ldi	r27, 0x03	; 3
 8bc:	0f d0       	rcall	.+30     	; 0x8dc <__ultoa_invert+0x86>
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__ultoa_invert+0x5c>
 8c0:	f6 cf       	rjmp	.-20     	; 0x8ae <__ultoa_invert+0x58>
 8c2:	46 2f       	mov	r20, r22
 8c4:	4f 70       	andi	r20, 0x0F	; 15
 8c6:	40 5d       	subi	r20, 0xD0	; 208
 8c8:	4a 33       	cpi	r20, 0x3A	; 58
 8ca:	18 f0       	brcs	.+6      	; 0x8d2 <__ultoa_invert+0x7c>
 8cc:	49 5d       	subi	r20, 0xD9	; 217
 8ce:	31 fd       	sbrc	r19, 1
 8d0:	40 52       	subi	r20, 0x20	; 32
 8d2:	41 93       	st	Z+, r20
 8d4:	02 d0       	rcall	.+4      	; 0x8da <__ultoa_invert+0x84>
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <__ultoa_invert+0x6c>
 8d8:	ea cf       	rjmp	.-44     	; 0x8ae <__ultoa_invert+0x58>
 8da:	b4 e0       	ldi	r27, 0x04	; 4
 8dc:	a6 95       	lsr	r26
 8de:	97 95       	ror	r25
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	ba 95       	dec	r27
 8e8:	c9 f7       	brne	.-14     	; 0x8dc <__ultoa_invert+0x86>
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	61 05       	cpc	r22, r1
 8ee:	71 05       	cpc	r23, r1
 8f0:	08 95       	ret
 8f2:	9b 01       	movw	r18, r22
 8f4:	ac 01       	movw	r20, r24
 8f6:	0a 2e       	mov	r0, r26
 8f8:	06 94       	lsr	r0
 8fa:	57 95       	ror	r21
 8fc:	47 95       	ror	r20
 8fe:	37 95       	ror	r19
 900:	27 95       	ror	r18
 902:	ba 95       	dec	r27
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__ultoa_invert+0xa2>
 906:	62 0f       	add	r22, r18
 908:	73 1f       	adc	r23, r19
 90a:	84 1f       	adc	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	a0 1d       	adc	r26, r0
 910:	08 95       	ret

00000912 <__prologue_saves__>:
 912:	2f 92       	push	r2
 914:	3f 92       	push	r3
 916:	4f 92       	push	r4
 918:	5f 92       	push	r5
 91a:	6f 92       	push	r6
 91c:	7f 92       	push	r7
 91e:	8f 92       	push	r8
 920:	9f 92       	push	r9
 922:	af 92       	push	r10
 924:	bf 92       	push	r11
 926:	cf 92       	push	r12
 928:	df 92       	push	r13
 92a:	ef 92       	push	r14
 92c:	ff 92       	push	r15
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	cd b7       	in	r28, 0x3d	; 61
 938:	de b7       	in	r29, 0x3e	; 62
 93a:	ca 1b       	sub	r28, r26
 93c:	db 0b       	sbc	r29, r27
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	f8 94       	cli
 942:	de bf       	out	0x3e, r29	; 62
 944:	0f be       	out	0x3f, r0	; 63
 946:	cd bf       	out	0x3d, r28	; 61
 948:	09 94       	ijmp

0000094a <__epilogue_restores__>:
 94a:	2a 88       	ldd	r2, Y+18	; 0x12
 94c:	39 88       	ldd	r3, Y+17	; 0x11
 94e:	48 88       	ldd	r4, Y+16	; 0x10
 950:	5f 84       	ldd	r5, Y+15	; 0x0f
 952:	6e 84       	ldd	r6, Y+14	; 0x0e
 954:	7d 84       	ldd	r7, Y+13	; 0x0d
 956:	8c 84       	ldd	r8, Y+12	; 0x0c
 958:	9b 84       	ldd	r9, Y+11	; 0x0b
 95a:	aa 84       	ldd	r10, Y+10	; 0x0a
 95c:	b9 84       	ldd	r11, Y+9	; 0x09
 95e:	c8 84       	ldd	r12, Y+8	; 0x08
 960:	df 80       	ldd	r13, Y+7	; 0x07
 962:	ee 80       	ldd	r14, Y+6	; 0x06
 964:	fd 80       	ldd	r15, Y+5	; 0x05
 966:	0c 81       	ldd	r16, Y+4	; 0x04
 968:	1b 81       	ldd	r17, Y+3	; 0x03
 96a:	aa 81       	ldd	r26, Y+2	; 0x02
 96c:	b9 81       	ldd	r27, Y+1	; 0x01
 96e:	ce 0f       	add	r28, r30
 970:	d1 1d       	adc	r29, r1
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	ed 01       	movw	r28, r26
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
